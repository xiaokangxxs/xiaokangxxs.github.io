<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021最新python从入门到放弃-初识python</title>
    <url>/2021/04/22/2021%E6%9C%80%E6%96%B0python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E5%88%9D%E8%AF%86python/</url>
    <content><![CDATA[<p><lottie-player autoplay loop renderer="svg" speed="1.5" background="transparent" mode="normal" src="https://assets7.lottiefiles.com/packages/lf20_ok9cq9zj.json" style="width: 320px"></lottie-player></p>
<blockquote>
<p>辞旧迎新，元旦快乐！都2021年了，还不赶紧学习python？</p>
</blockquote>
<h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><h3 id="1-Python的历史"><a href="#1-Python的历史" class="headerlink" title="1. Python的历史"></a>1. Python的历史</h3><p>1989年圣诞节，著名的“龟叔” Guido van Rossum （吉多·范罗苏姆 <strong>荷兰人</strong>）开始写Python语言的编译器。</p>
<p>1991年2月，第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对类、函数、异常处理等构造块的支持，还有对列表、字典等核心数据类型的支持，同时支持以模块为基础来构造应用程序。</p>
<p>1994年1月，Python 1.0正式发布。</p>
<p>2000年10月16日，Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</p>
<p>2008年12月3日，Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。</p>
<p>目前我们使用的Python 3.7.x的版本是在2018年发布的。</p>
<p><code>版本号解释：Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</code></p>
<h3 id="2-Python的优缺点"><a href="#2-Python的优缺点" class="headerlink" title="2. Python的优缺点"></a>2. Python的优缺点</h3><p>Python的优点很多，可以总结为以下几点：</p>
<ul>
<li>简单明了，学习曲线低，比很多编程语言都容易上手。</li>
<li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li>
<li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li>
<li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li>
<li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li>
</ul>
<p>Python的缺点主要集中在以下几点：</p>
<ul>
<li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li>
<li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li>
<li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就容易有错误。</li>
</ul>
<h3 id="3-Python的应用领域"><a href="#3-Python的应用领域" class="headerlink" title="3. Python的应用领域"></a>3. Python的应用领域</h3><p>目前Python在Web后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、运维开发、自动化测试、数据分析、机器学习、人工智能等领域都有着广泛的应用。</p>
<h2 id="搭建编程环境"><a href="#搭建编程环境" class="headerlink" title="搭建编程环境"></a>搭建编程环境</h2><p>视频中使用的Python版本下载链接：<a href="https://www.python.org/downloads/release/python-371/">Python 3.7.1  <strong>Release Date:</strong> Oct. 20, 2018</a></p>
<h3 id="1-Windows环境"><a href="#1-Windows环境" class="headerlink" title="1. Windows环境"></a>1. Windows环境</h3><p>从上方Python官网下载Python 3.7.1的exe安装包，双击进行安装，特别要注意勾上<code>Add Python 3.7 to PATH</code>， 然后点“Install Now”即可完成安装。  </p>
<p><img src="/Python/python-01/image-20210101144401100.png" alt="image-20210101144401100"></p>
<p>安装成功如下如图所示</p>
<p><img src="/Python/python-01/image-20210101143742245.png" alt="image-20210101143742245"></p>
<p>验证：</p>
<p>安装成功后， 打开命令提示符窗口， 敲入<code>python --version</code>，出现下图说明成功</p>
<p><img src="/Python/python-01/image-20210101145002004.png" alt="image-20210101145002004"></p>
<p><code>–**web-based installer**：在线安装。下载的是一个exe可执行程序，双击后，该程序自动下载安装文件（需要有网络）进行安装。  –**executable installer**：程序安装。下载的是一个exe可执行程序，双击进行安装。  –**embeddable zip file**：解压安装。下载的是一个压缩文件，解压后即表示安装完成。</code></p>
<h3 id="2-Linux环境"><a href="#2-Linux环境" class="headerlink" title="2. Linux环境"></a>2. Linux环境</h3><p><a href="https://mp.weixin.qq.com/s/FNXjVGzIJlNDLbS6u0j6Pg">Linux下Python的安装-视频教程</a></p>
<h3 id="3-MacOS环境"><a href="#3-MacOS环境" class="headerlink" title="3. MacOS环境"></a>3. MacOS环境</h3><p>从上方Python官网下载Python 3.7.1的安装程序（网速慢的同学请移步国内镜像），双击运行并安装即可或者直接通过命令brew install python3安装即可。  </p>
<h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><h3 id="1-在python自带的IDLE交互环境中执行代码"><a href="#1-在python自带的IDLE交互环境中执行代码" class="headerlink" title="1. 在python自带的IDLE交互环境中执行代码"></a>1. 在python自带的IDLE交互环境中执行代码</h3><p>首先打开命令提示符窗口， 敲入<code>python</code>，再输入以下语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一行python代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello xiaokang.WeChat:xiaokangxxs&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/Python/python-01/image-20210101150005489.png" alt="image-20210101150005489"></p>
<h3 id="2-使用python命令运行程序"><a href="#2-使用python命令运行程序" class="headerlink" title="2. 使用python命令运行程序"></a>2. 使用python命令运行程序</h3><p>首先在当前目录创建一个名为<code>hello.py</code>的文件，将上面的语句输入进去保存，然后在当前目录打开命令提示符窗口，输入<code>python hello.py</code></p>
<p><img src="/Python/python-01/image-20210101150349268.png" alt="image-20210101150349268"></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是编程语言中一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p>
<ol>
<li>单行注释：以#开头的部分</li>
<li>多行注释：三个双/单引号开头，三个双/单引号结尾</li>
</ol>
<p>改造上面的<code>hello.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Date : 2021/1/1</span></span><br><span class="line"><span class="string">Author : 小康</span></span><br><span class="line"><span class="string">description ：</span></span><br><span class="line"><span class="string">Site : www.xiaokang.cool</span></span><br><span class="line"><span class="string">微信公众号: 小康新鲜事儿</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Date : 2021/1/1</span></span><br><span class="line"><span class="string">Author : 小康</span></span><br><span class="line"><span class="string">description ：</span></span><br><span class="line"><span class="string">Site : www.xiaokang.cool</span></span><br><span class="line"><span class="string">微信公众号: 小康新鲜事儿</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 第一行python代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello xiaokang.WeChat:xiaokangxxs&quot;</span>) <span class="comment"># 这是单行注释</span></span><br></pre></td></tr></table></figure>

<p>改造完成后使用python命令运行程序，结果和上面一样。</p>
<h2 id="python之禅"><a href="#python之禅" class="headerlink" title="python之禅"></a>python之禅</h2><p>在Python自带的IDLE交互式环境中输入下面的代码就可以看到python的设计理念（禅）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure>

<p><img src="/Python/python-01/image-20210101151141665.png" alt="image-20210101151141665"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line">Python之禅 ，by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">优美好于丑陋（Python 以优美的代码为其风格，不要写丑陋的代码）</span><br><span class="line"></span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">明了好于隐晦（Python的每一行代码、每一个变量、每一函数的意义应该是明确的，让人看了一目了然）</span><br><span class="line"></span><br><span class="line">Simple is better than complex.</span><br><span class="line">简洁好于复杂（Python的每一行代码应当是简洁的，一行代码只为一个子功能）</span><br><span class="line"></span><br><span class="line">Complex is better than complicated.</span><br><span class="line">复杂好于凌乱（如果无法避免引入复杂的代码，也要尽量保证代码之间明确简洁的关系）</span><br><span class="line"></span><br><span class="line">Flat is better than nested.</span><br><span class="line">扁平好于嵌套（Python的代码结构应该是扁平的，不应该有太多嵌套的结构）</span><br><span class="line"></span><br><span class="line">Sparse is better than dense.</span><br><span class="line">稀疏好于密集（Python代码之间应该是有间隔的，每个功能块、每个函数、每个参数、每个类之间应当有适当的间距）</span><br><span class="line"></span><br><span class="line">Readability counts.</span><br><span class="line">代码可读性很重要（Python代码具有很好的可读性，注释、变量名、函数名、类名、模块名、代码块功能等的作用和意义都是一目了然的）</span><br><span class="line"></span><br><span class="line">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">虽然实用性很重要，但任何特殊情况都不足以特殊到违背上述规则（不要为了处理某一个特殊情况，而破坏了上述任何一个规则）</span><br><span class="line"></span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">不要忽视任何错误，除非有意为之（任何时候都要对异常和错误进行处理，不要写 except:pass 风格的代码）</span><br><span class="line"></span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">面对模棱两可的情况，拒绝享受让别人去猜测的乐趣</span><br><span class="line">提供有且仅有的一种最明显解决方法（解决一个问题的方法可能会有很多种，但在Python中，只选择最明显的那一个）</span><br><span class="line"></span><br><span class="line">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="line">虽然起初这很难做到，除非你是荷兰人（荷兰人暗指 Python之父：Guido van Rossum（龟叔） ）</span><br><span class="line"></span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">动手行动好于什么都不做，但不加思考就行动还不如不做</span><br><span class="line"></span><br><span class="line">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="line">如果某问题一个代码实现很难解释，那说明这个实现不是很好</span><br><span class="line"></span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">如果某问题一个代码实现很简单，那这个实现可能走在正确的路上</span><br><span class="line"></span><br><span class="line">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class="line">命名空间是一个很棒的注意，应当多加利用</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>DataX安装及基本使用</title>
    <url>/2021/04/24/DataX%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>这里我们演示 MySQL 和 HDFS 之间的数据导入导出，需要预先安装 Hadoop集群。Hadoop 集群的安装教程如下：</p>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s/WNS9Ho-UWesQifwk4FjxQQ">Linux下jdk的安装</a></p>
<p><a href="https://mp.weixin.qq.com/s/FNXjVGzIJlNDLbS6u0j6Pg">Linux下Python的安装-视频教程</a></p>
<p><a href="https://mp.weixin.qq.com/s/Ic1aumcFa8B-a-9kg5AscQ">Hadoop单机伪分布式-视频教程</a></p>
<p><a href="https://mp.weixin.qq.com/s/NLpvOiqr8tLDY4kA3EM7Zg">Hadoop完全分布式集群环境搭建-视频教程</a></p>
<p><a href="https://mp.weixin.qq.com/s/gmOmg6uKD2LjhZPf4eZXdA">HA(高可用)-Hadoop集群环境搭建视频+图文教程</a></p>
</blockquote>
<h2 id="一、DataX-概述"><a href="#一、DataX-概述" class="headerlink" title="一、DataX 概述"></a>一、DataX 概述</h2><p>DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、ODPS、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。 </p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/DataX/datax_relation.png"/> </div>
## 二、安装

<h3 id="2-1-下载并解压"><a href="#2-1-下载并解压" class="headerlink" title="2.1 下载并解压"></a>2.1 下载并解压</h3><p>源码地址：<a href="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a> </p>
<p>这里我下载的是最新版本的 DataX3.0 。下载地址为：<a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz">http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz </a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载后进行解压</span></span><br><span class="line">[xiaokang@hadoop ~]$ tar -zxvf datax.tar.gz -C /opt/software/</span><br></pre></td></tr></table></figure>

<h3 id="2-2-运行自检脚本"><a href="#2-2-运行自检脚本" class="headerlink" title="2.2 运行自检脚本"></a>2.2 运行自检脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop ~]$ cd /opt/software/datax/</span><br><span class="line">[xiaokang@hadoop datax]$ bin/datax.py job/job.json</span><br></pre></td></tr></table></figure>

<p>出现以下界面说明DataX安装成功</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/DataX/job.png"/> </div>

<h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="3-1-从stream读取数据并打印到控制台"><a href="#3-1-从stream读取数据并打印到控制台" class="headerlink" title="3.1 从stream读取数据并打印到控制台"></a>3.1 从stream读取数据并打印到控制台</h3><h4 id="1-查看官方json配置模板"><a href="#1-查看官方json配置模板" class="headerlink" title="1. 查看官方json配置模板"></a>1. 查看官方json配置模板</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop ~]$ python /opt/software/datax/bin/datax.py -r streamreader -w streamwriter</span><br><span class="line"></span><br><span class="line">DataX (DATAX-OPENSOURCE-3.0), From Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please refer to the streamreader document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/streamreader/doc/streamreader.md </span><br><span class="line"></span><br><span class="line">Please refer to the streamwriter document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/streamwriter/doc/streamwriter.md </span><br><span class="line"> </span><br><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python &#123;DATAX_HOME&#125;/bin/datax.py &#123;JSON_FILE_NAME&#125;.json </span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;streamreader&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;sliceRecordCount&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;streamwriter&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;encoding&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;print&quot;: true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-根据模板编写json文件"><a href="#2-根据模板编写json文件" class="headerlink" title="2. 根据模板编写json文件"></a>2. 根据模板编写json文件</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;streamreader&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">								<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;xiaokang-微信公众号:小康新鲜事儿&quot;</span></span><br><span class="line">							&#125;,</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">								<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;你好，世界-DataX&quot;</span></span><br><span class="line">							&#125;</span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;sliceRecordCount&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;streamwriter&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;utf-8&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;print&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;channel&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-运行Job"><a href="#3-运行Job" class="headerlink" title="3. 运行Job"></a>3. 运行Job</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop json]$ /opt/software/datax/bin/datax.py ./stream2stream.json</span><br></pre></td></tr></table></figure>

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/DataX/stream2stream.png"/> </div>
### 3.2 MySQL数据导入到HDFS

<p>示例：导出 MySQL 数据库中的 <code>help_keyword</code> 表到 HDFS 的 <code>/datax </code>目录下(此目录必须提前创建)。</p>
<blockquote>
<p>注：help_keyword 是 MySQL 内置的一张字典表，之后的示例均使用这张表。</p>
</blockquote>
<h4 id="1-查看官方json配置模板-1"><a href="#1-查看官方json配置模板-1" class="headerlink" title="1. 查看官方json配置模板"></a>1. 查看官方json配置模板</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop json]$ python /opt/software/datax/bin/datax.py -r mysqlreader -w hdfswriter</span><br><span class="line"></span><br><span class="line">DataX (DATAX-OPENSOURCE-3.0), From Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please refer to the mysqlreader document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md </span><br><span class="line"></span><br><span class="line">Please refer to the hdfswriter document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md </span><br><span class="line"> </span><br><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python &#123;DATAX_HOME&#125;/bin/datax.py &#123;JSON_FILE_NAME&#125;.json </span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [], </span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        &quot;password&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;username&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;where&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;hdfswriter&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;compress&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;defaultFS&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;fieldDelimiter&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;fileName&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;fileType&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;path&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;writeMode&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-根据模板编写json文件-1"><a href="#2-根据模板编写json文件-1" class="headerlink" title="2. 根据模板编写json文件"></a>2. 根据模板编写json文件</h4><p>mysqlreader参数解析： </p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/DataX/mysqlreader.png"/> </div>
hdfswriter参数解析： 

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/DataX/hdfswriter.png"/> </div>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mysqlreader&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">							<span class="string">&quot;help_keyword_id&quot;</span>,</span><br><span class="line">							<span class="string">&quot;name&quot;</span></span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span>: [</span><br><span class="line">									<span class="string">&quot;jdbc:mysql://192.168.1.106:3306/mysql&quot;</span></span><br><span class="line">                                ], </span><br><span class="line">                                <span class="attr">&quot;table&quot;</span>: [</span><br><span class="line">									<span class="string">&quot;help_keyword&quot;</span></span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;xiaokang&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hdfswriter&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">	                        &#123;</span><br><span class="line">								<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;help_keyword_id&quot;</span>,</span><br><span class="line">								<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;int&quot;</span></span><br><span class="line">	                        &#125;,</span><br><span class="line">	                        &#123;</span><br><span class="line">								<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>,</span><br><span class="line">								<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span></span><br><span class="line">	                        &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span>: <span class="string">&quot;hdfs://hadoop:9000&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span>: <span class="string">&quot;|&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;keyword.txt&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span>: <span class="string">&quot;text&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/datax&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span>: <span class="string">&quot;append&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;channel&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-运行Job-1"><a href="#3-运行Job-1" class="headerlink" title="3. 运行Job"></a>3. 运行Job</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop json]$ /opt/software/datax/bin/datax.py ./mysql2hdfs.json</span><br></pre></td></tr></table></figure>

<h3 id="3-3-HDFS数据导出到MySQL"><a href="#3-3-HDFS数据导出到MySQL" class="headerlink" title="3.3 HDFS数据导出到MySQL"></a>3.3 HDFS数据导出到MySQL</h3><h4 id="1-将3-2中导入的文件重命名并在数据库创建表"><a href="#1-将3-2中导入的文件重命名并在数据库创建表" class="headerlink" title="1. 将3.2中导入的文件重命名并在数据库创建表"></a>1. 将3.2中导入的文件重命名并在数据库创建表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop ~]$ hdfs dfs -mv /datax/keyword.txt__4c0e0d04_e503_437a_a1e3_49db49cbaaed /datax/keyword.txt</span><br></pre></td></tr></table></figure>

<p>表必须预先创建，建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> help_keyword_from_hdfs_datax <span class="keyword">LIKE</span> help_keyword;</span><br></pre></td></tr></table></figure>

<h4 id="2-查看官方json配置模板"><a href="#2-查看官方json配置模板" class="headerlink" title="2. 查看官方json配置模板"></a>2. 查看官方json配置模板</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop json]$ python /opt/software/datax/bin/datax.py -r hdfsreader -w mysqlwriter</span><br><span class="line"></span><br><span class="line">DataX (DATAX-OPENSOURCE-3.0), From Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please refer to the hdfsreader document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md </span><br><span class="line"></span><br><span class="line">Please refer to the mysqlwriter document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md </span><br><span class="line"> </span><br><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python &#123;DATAX_HOME&#125;/bin/datax.py &#123;JSON_FILE_NAME&#125;.json </span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;hdfsreader&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;defaultFS&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;encoding&quot;: &quot;UTF-8&quot;, </span><br><span class="line">                        &quot;fieldDelimiter&quot;: &quot;,&quot;, </span><br><span class="line">                        &quot;fileType&quot;: &quot;orc&quot;, </span><br><span class="line">                        &quot;path&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlwriter&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;&quot;, </span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        &quot;password&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;preSql&quot;: [], </span><br><span class="line">                        &quot;session&quot;: [], </span><br><span class="line">                        &quot;username&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;writeMode&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-根据模板编写json文件"><a href="#3-根据模板编写json文件" class="headerlink" title="3. 根据模板编写json文件"></a>3. 根据模板编写json文件</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hdfsreader&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">							<span class="string">&quot;*&quot;</span></span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span>: <span class="string">&quot;hdfs://hadoop:9000&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span>: <span class="string">&quot;|&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span>: <span class="string">&quot;text&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/datax/keyword.txt&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mysqlwriter&quot;</span>, </span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">							<span class="string">&quot;help_keyword_id&quot;</span>,</span><br><span class="line">							<span class="string">&quot;name&quot;</span></span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span>: <span class="string">&quot;jdbc:mysql://192.168.1.106:3306/mysql&quot;</span>, </span><br><span class="line">                                <span class="attr">&quot;table&quot;</span>: [<span class="string">&quot;help_keyword_from_hdfs_datax&quot;</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;xiaokang&quot;</span>,  </span><br><span class="line">                        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span>: <span class="string">&quot;insert&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;channel&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-运行Job-2"><a href="#3-运行Job-2" class="headerlink" title="3. 运行Job"></a>3. 运行Job</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop json]$ /opt/software/datax/bin/datax.py ./hdfs2mysql.json</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>64条常用正则</title>
    <url>/2021/04/24/64%E6%9D%A1%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h3 id="火车车次"><a href="#火车车次" class="headerlink" title="火车车次"></a>火车车次</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[GCDZTSPKXLY1-9]\d&#123;1,4&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="手机机身码-IMEI"><a href="#手机机身码-IMEI" class="headerlink" title="手机机身码(IMEI)"></a>手机机身码(IMEI)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d&#123;15,17&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="必须带端口号的网址-或ip"><a href="#必须带端口号的网址-或ip" class="headerlink" title="必须带端口号的网址(或ip)"></a>必须带端口号的网址(或ip)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^((ht|f)tps?:\/\/)?[\w-]+(\.[\w-]+)+:\d&#123;1,5&#125;\/?$/</span><br></pre></td></tr></table></figure>

<h3 id="网址-url-支持端口和”-参数”和”-参数"><a href="#网址-url-支持端口和”-参数”和”-参数" class="headerlink" title="网址(url,支持端口和”?+参数”和”#+参数)"></a>网址(url,支持端口和”?+参数”和”#+参数)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(((ht|f)tps?):\/\/)?[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:/~+#-]*[\w@?^=%&amp;/~+#-])?$/</span><br></pre></td></tr></table></figure>

<h3 id="统一社会信用代码"><a href="#统一社会信用代码" class="headerlink" title="统一社会信用代码"></a>统一社会信用代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="迅雷链接"><a href="#迅雷链接" class="headerlink" title="迅雷链接"></a>迅雷链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^thunderx?:\/\/[a-zA-Z\d]+=$/</span><br></pre></td></tr></table></figure>

<h3 id="ed2k链接-宽松匹配"><a href="#ed2k链接-宽松匹配" class="headerlink" title="ed2k链接(宽松匹配)"></a>ed2k链接(宽松匹配)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^ed2k:\/\/\|file\|.+\|\/$/</span><br></pre></td></tr></table></figure>

<h3 id="磁力链接-宽松匹配"><a href="#磁力链接-宽松匹配" class="headerlink" title="磁力链接(宽松匹配)"></a>磁力链接(宽松匹配)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^magnet:\?xt=urn:btih:[0-9a-fA-F]&#123;40,&#125;.*$/</span><br></pre></td></tr></table></figure>

<h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])(?:\.(?:\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5]))&#123;3&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="linux”隐藏文件”路径"><a href="#linux”隐藏文件”路径" class="headerlink" title="linux”隐藏文件”路径"></a>linux”隐藏文件”路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\/(?:[^/]+\/)*\.[^/]*/</span><br></pre></td></tr></table></figure>

<h3 id="linux文件夹路径"><a href="#linux文件夹路径" class="headerlink" title="linux文件夹路径"></a>linux文件夹路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\/(?:[^/]+\/)*$/</span><br></pre></td></tr></table></figure>

<h3 id="linux文件路径"><a href="#linux文件路径" class="headerlink" title="linux文件路径"></a>linux文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\/(?:[^/]+\/)*[^/]+$/</span><br></pre></td></tr></table></figure>

<h3 id="window”文件夹”路径"><a href="#window”文件夹”路径" class="headerlink" title="window”文件夹”路径"></a>window”文件夹”路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z]:\\(?:\w+\\?)*$/</span><br></pre></td></tr></table></figure>

<h3 id="window下”文件”路径"><a href="#window下”文件”路径" class="headerlink" title="window下”文件”路径"></a>window下”文件”路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z]:\\(?:\w+\\)*\w+\.\w+$/</span><br></pre></td></tr></table></figure>

<h3 id="股票代码-A股"><a href="#股票代码-A股" class="headerlink" title="股票代码(A股)"></a>股票代码(A股)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(s[hz]|S[HZ])(000[\d]&#123;3&#125;|002[\d]&#123;3&#125;|300[\d]&#123;3&#125;|600[\d]&#123;3&#125;|60[\d]&#123;4&#125;)$/</span><br></pre></td></tr></table></figure>

<h3 id="大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数"><a href="#大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数" class="headerlink" title="大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数"></a>大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^150$|^(?:\d|[1-9]\d|1[0-4]\d)(?:.5)?$/</span><br></pre></td></tr></table></figure>

<h3 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^&lt;!--[\s\S]*?--&gt;$/</span><br></pre></td></tr></table></figure>

<h3 id="md5格式-32位"><a href="#md5格式-32位" class="headerlink" title="md5格式(32位)"></a>md5格式(32位)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^([a-f\d]&#123;32&#125;|[A-F\d]&#123;32&#125;)$/</span><br></pre></td></tr></table></figure>

<h3 id="版本号-version-格式必须为X-Y-Z"><a href="#版本号-version-格式必须为X-Y-Z" class="headerlink" title="版本号(version)格式必须为X.Y.Z"></a>版本号(version)格式必须为X.Y.Z</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d+(?:\.\d+)&#123;2&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="视频-video-链接地址（视频格式可按需增删）"><a href="#视频-video-链接地址（视频格式可按需增删）" class="headerlink" title="视频(video)链接地址（视频格式可按需增删）"></a>视频(video)链接地址（视频格式可按需增删）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^https?:\/\/(.+\/)+.+(\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i</span><br></pre></td></tr></table></figure>

<h3 id="图片-image-链接地址（图片格式可按需增删）"><a href="#图片-image-链接地址（图片格式可按需增删）" class="headerlink" title="图片(image)链接地址（图片格式可按需增删）"></a>图片(image)链接地址（图片格式可按需增删）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^https?:\/\/(.+\/)+.+(\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i</span><br></pre></td></tr></table></figure>

<h3 id="24小时制时间（HH-mm-ss）"><a href="#24小时制时间（HH-mm-ss）" class="headerlink" title="24小时制时间（HH:mm:ss）"></a>24小时制时间（HH:mm:ss）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/</span><br></pre></td></tr></table></figure>

<h3 id="12小时制时间（hh-mm-ss）"><a href="#12小时制时间（hh-mm-ss）" class="headerlink" title="12小时制时间（hh:mm:ss）"></a>12小时制时间（hh:mm:ss）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:1[0-2]|0?[1-9]):[0-5]\d:[0-5]\d$/</span><br></pre></td></tr></table></figure>

<h3 id="base64格式"><a href="#base64格式" class="headerlink" title="base64格式"></a>base64格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\s*data:(?:[a-z]+\/[a-z0-9-+.]+(?:;[a-z-]+=[a-z0-9-]+)?)?(?:;base64)?,([a-z0-9!$&amp;&#x27;,()*+;=\-._~:@/?%\s]*?)\s*$/i</span><br></pre></td></tr></table></figure>

<h3 id="数字-货币金额（支持负数、千分位分隔符）"><a href="#数字-货币金额（支持负数、千分位分隔符）" class="headerlink" title="数字/货币金额（支持负数、千分位分隔符）"></a>数字/货币金额（支持负数、千分位分隔符）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^-?\d+(,\d&#123;3&#125;)*(\.\d&#123;1,2&#125;)?$/</span><br></pre></td></tr></table></figure>

<h3 id="数字-货币金额-只支持正数、不支持校验千分位分隔符"><a href="#数字-货币金额-只支持正数、不支持校验千分位分隔符" class="headerlink" title="数字/货币金额 (只支持正数、不支持校验千分位分隔符)"></a>数字/货币金额 (只支持正数、不支持校验千分位分隔符)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/(?:^[1-9]([0-9]+)?(?:\.[0-9]&#123;1,2&#125;)?$)|(?:^(?:0)&#123;1&#125;$)|(?:^[0-9]\.[0-9](?:[0-9])?$)/</span><br></pre></td></tr></table></figure>

<h3 id="银行卡号（10到30位-覆盖对公-私账户-参考微信支付）"><a href="#银行卡号（10到30位-覆盖对公-私账户-参考微信支付）" class="headerlink" title="银行卡号（10到30位, 覆盖对公/私账户, 参考微信支付）"></a>银行卡号（10到30位, 覆盖对公/私账户, 参考<a href="https://pay.weixin.qq.com/wiki/doc/api/xiaowei.php?chapter=22_1">微信支付</a>）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;9,29&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="中文姓名"><a href="#中文姓名" class="headerlink" title="中文姓名"></a>中文姓名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:[\u4e00-\u9fa5·]&#123;2,16&#125;)$/</span><br></pre></td></tr></table></figure>

<h3 id="英文姓名"><a href="#英文姓名" class="headerlink" title="英文姓名"></a>英文姓名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/(^[a-zA-Z]&#123;1&#125;[a-zA-Z\s]&#123;0,20&#125;[a-zA-Z]&#123;1&#125;$)/</span><br></pre></td></tr></table></figure>

<h3 id="车牌号-新能源"><a href="#车牌号-新能源" class="headerlink" title="车牌号(新能源)"></a>车牌号(新能源)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;(([0-9]&#123;5&#125;[DF])|([DF][A-HJ-NP-Z0-9][0-9]&#123;4&#125;))$/</span><br></pre></td></tr></table></figure>

<h3 id="车牌号-非新能源"><a href="#车牌号-非新能源" class="headerlink" title="车牌号(非新能源)"></a>车牌号(非新能源)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="车牌号-新能源-非新能源"><a href="#车牌号-新能源-非新能源" class="headerlink" title="车牌号(新能源+非新能源)"></a>车牌号(新能源+非新能源)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;(?:(?:[0-9]&#123;5&#125;[DF])|(?:[DF](?:[A-HJ-NP-Z0-9])[0-9]&#123;4&#125;)))$|(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9 挂学警港澳]&#123;1&#125;)$/</span><br></pre></td></tr></table></figure>

<h3 id="手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段"><a href="#手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段" class="headerlink" title="手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段"></a>手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-7|9])|(?:5[0-3|5-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[1|8|9]))\d&#123;8&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可"><a href="#手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可" class="headerlink" title="手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可"></a>手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:(?:\+|00)86)?1[3-9]\d&#123;9&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条"><a href="#手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条" class="headerlink" title="手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条"></a>手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:(?:\+|00)86)?1\d&#123;10&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="date-日期"><a href="#date-日期" class="headerlink" title="date(日期)"></a>date(日期)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d&#123;4&#125;(-)(1[0-2]|0?\d)\1([0-2]\d|\d|30|31)$/</span><br></pre></td></tr></table></figure>

<h3 id="email-邮箱"><a href="#email-邮箱" class="headerlink" title="email(邮箱)"></a>email(邮箱)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(([^&lt;&gt;()[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br></pre></td></tr></table></figure>

<h3 id="座机-tel-phone-电话-国内-如-0341-86091234"><a href="#座机-tel-phone-电话-国内-如-0341-86091234" class="headerlink" title="座机(tel phone)电话(国内),如: 0341-86091234"></a>座机(tel phone)电话(国内),如: 0341-86091234</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d&#123;3&#125;-\d&#123;8&#125;$|^\d&#123;4&#125;-\d&#123;7,8&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="身份证号-1代-15位数字"><a href="#身份证号-1代-15位数字" class="headerlink" title="身份证号(1代,15位数字)"></a>身份证号(1代,15位数字)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;7&#125;(?:0\d|10|11|12)(?:0[1-9]|[1-2][\d]|30|31)\d&#123;3&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X"><a href="#身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X" class="headerlink" title="身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X"></a>身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;5&#125;(?:18|19|20)\d&#123;2&#125;(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d&#123;3&#125;[\dXx]$/</span><br></pre></td></tr></table></figure>

<h3 id="身份证号-支持1-2代-15位-18位数字"><a href="#身份证号-支持1-2代-15位-18位数字" class="headerlink" title="身份证号, 支持1/2代(15位/18位数字)"></a>身份证号, 支持1/2代(15位/18位数字)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/(^\d&#123;8&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;$)|(^\d&#123;6&#125;(18|19|20)\d&#123;2&#125;(0[1-9]|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;(\d|X|x)$)/</span><br></pre></td></tr></table></figure>

<h3 id="护照（包含香港、澳门）"><a href="#护照（包含香港、澳门）" class="headerlink" title="护照（包含香港、澳门）"></a>护照（包含香港、澳门）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/(^[EeKkGgDdSsPpHh]\d&#123;8&#125;$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\d&#123;7&#125;$)/</span><br></pre></td></tr></table></figure>

<h3 id="帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合"><a href="#帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合" class="headerlink" title="帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合"></a>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z]\w&#123;4,15&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="中文-汉字"><a href="#中文-汉字" class="headerlink" title="中文/汉字"></a>中文/汉字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])+$/</span><br></pre></td></tr></table></figure>

<h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d+\.\d+$/</span><br></pre></td></tr></table></figure>

<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\d&#123;1,&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="html标签-宽松匹配"><a href="#html标签-宽松匹配" class="headerlink" title="html标签(宽松匹配)"></a>html标签(宽松匹配)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/&lt;(\w+)[^&gt;]*&gt;(.*?&lt;\/\1&gt;)?/</span><br></pre></td></tr></table></figure>

<h3 id="qq号格式正确"><a href="#qq号格式正确" class="headerlink" title="qq号格式正确"></a>qq号格式正确</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[1-9][0-9]&#123;4,10&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="数字和字母组成"><a href="#数字和字母组成" class="headerlink" title="数字和字母组成"></a>数字和字母组成</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9]+$/</span><br></pre></td></tr></table></figure>

<h3 id="英文字母"><a href="#英文字母" class="headerlink" title="英文字母"></a>英文字母</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z]+$/</span><br></pre></td></tr></table></figure>

<h3 id="小写英文字母组成"><a href="#小写英文字母组成" class="headerlink" title="小写英文字母组成"></a>小写英文字母组成</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-z]+$/</span><br></pre></td></tr></table></figure>

<h3 id="大写英文字母"><a href="#大写英文字母" class="headerlink" title="大写英文字母"></a>大写英文字母</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[A-Z]+$/</span><br></pre></td></tr></table></figure>

<h3 id="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"><a href="#密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符" class="headerlink" title="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"></a>密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^\S*(?=\S&#123;6,&#125;)(?=\S*\d)(?=\S*[A-Z])(?=\S*[a-z])(?=\S*[!@#$%^&amp;*? ])\S*$/</span><br></pre></td></tr></table></figure>

<h3 id="用户名校验，4到16位（字母，数字，下划线，减号）"><a href="#用户名校验，4到16位（字母，数字，下划线，减号）" class="headerlink" title="用户名校验，4到16位（字母，数字，下划线，减号）"></a>用户名校验，4到16位（字母，数字，下划线，减号）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="ip-v4"><a href="#ip-v4" class="headerlink" title="ip-v4"></a>ip-v4</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span><br></pre></td></tr></table></figure>

<h3 id="ip-v6"><a href="#ip-v6" class="headerlink" title="ip-v6"></a>ip-v6</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^((([0-9A-Fa-f]&#123;1,4&#125;:)&#123;7&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;:[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;5&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)?[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;4&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,2&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;3&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,3&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;2&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,4&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;:((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|(::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|([0-9A-Fa-f]&#123;1,4&#125;::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,6&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;1,7&#125;:))$/i</span><br></pre></td></tr></table></figure>

<h3 id="16进制颜色"><a href="#16进制颜色" class="headerlink" title="16进制颜色"></a>16进制颜色</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span><br></pre></td></tr></table></figure>

<h3 id="微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线"><a href="#微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线" class="headerlink" title="微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线"></a>微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z][-_a-zA-Z0-9]&#123;5,19&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="邮政编码-中国"><a href="#邮政编码-中国" class="headerlink" title="邮政编码(中国)"></a>邮政编码(中国)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\d&#123;4&#125;$/</span><br></pre></td></tr></table></figure>

<h3 id="中文和数字"><a href="#中文和数字" class="headerlink" title="中文和数字"></a>中文和数字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^((?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])|(\d))+$/</span><br></pre></td></tr></table></figure>

<h3 id="不能包含字母"><a href="#不能包含字母" class="headerlink" title="不能包含字母"></a>不能包含字母</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^[^A-Za-z]*$/</span><br></pre></td></tr></table></figure>

<h3 id="java包名"><a href="#java包名" class="headerlink" title="java包名"></a>java包名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^([a-zA-Z_][a-zA-Z0-9_]*)+([.][a-zA-Z_][a-zA-Z0-9_]*)+$/</span><br></pre></td></tr></table></figure>

<h3 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/^((([a-f0-9]&#123;2&#125;:)&#123;5&#125;)|(([a-f0-9]&#123;2&#125;-)&#123;5&#125;))[a-f0-9]&#123;2&#125;$/i</span><br></pre></td></tr></table></figure>

<h3 id="匹配连续重复的字符"><a href="#匹配连续重复的字符" class="headerlink" title="匹配连续重复的字符"></a>匹配连续重复的字符</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/(.)\1+/</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Kafka你了解多少？</title>
    <url>/2021/04/24/Kafka%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</url>
    <content><![CDATA[<h3 id="1-Kafka架构"><a href="#1-Kafka架构" class="headerlink" title="1. Kafka架构"></a>1. Kafka架构</h3><div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/Kafka/kafka-architecture.png"/> </div>

<p><strong>Kafka Cluster</strong></p>
<p>Kafka作为分布式消息队列，是以集群形式对外服务的（即使只有一个节点）。初始化时会在Zookeeper的/cluster/id目录下创建ClusterID值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] get /cluster/id</span><br><span class="line">&#123;&quot;version&quot;:&quot;1&quot;,&quot;id&quot;:&quot;Nf1FphTTQni9RjWWz31lrQ&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Producer</strong></p>
<p>生产者是Kafka中发送消息的客户端，主要是通过Zookeeper与Kafka集群进行连接，并且将消息发送<br>到Kafka集群  </p>
<p><strong>Consumer</strong></p>
<p>消费者是Kafka消息消费的客户端。Consumer直接与Kafka Borker构建连接消费Broker上某个主题<br>的数据</p>
<p><strong>Zookeeper集群</strong></p>
<p>Kafka集群、ISR、消费者组等信息存储在Zookeeper中，0.9版本之前消费者offset维护在zk中，0.9版本之后存储在本地</p>
<p><strong>Topic</strong></p>
<p>生产者发送消息时必须指定一个分类，我们将它称为主题。主题是Kafka中数据隔离的一种方式，Topic是一个逻辑概念，其真正的表现形式是在Kafka存储目录下创建多个关于该主题的文件夹。每个主题代表了一种数据来源。比如topicA：代表日志数据，topicB：代表用户数据 </p>
<p><strong>Partition</strong></p>
<p>Partition就是Topic物理上的实现，其表现形式为目录。每个Topic可以包含多个分区，每个Partiton包含了Topic的部分数据。Partition目录命名方式：Topic名称-分区ID，比如logs，三个分区logs-0、logs-1、logs-2  </p>
<p><strong>Broker</strong></p>
<p>Kafka集群中每个节点都是Broker。一个集群可以包含N个Broker，Broker.id值必须不同。在Zookeeper之上可以查看每个节点的详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 11] get /brokers/ids/0</span><br><span class="line">&#123;&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT://hadoop:9092&quot;],&quot;jmx_port&quot;:-1,&quot;host&quot;:&quot;hadoop&quot;,&quot;timestamp&quot;:&quot;1593767504799&quot;,&quot;port&quot;:9092,&quot;version&quot;:4&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Consumer Group</strong></p>
<p>消费者组主要用来管理组织消费者的，并且消费者组规定了消费消息的行为。Kafka实现点对点和发布订阅模式主要是基于Consumer Group的，其中：在同一个消费者组内，消息是P2P模式；在不同消费者组之间，消息是发布订阅模式  </p>
<h3 id="2-Kafka压测"><a href="#2-Kafka压测" class="headerlink" title="2. Kafka压测"></a>2. Kafka压测</h3><p>使用Kafka官方自带压力测试脚本（kafka-consumer-perf-test.sh、kafka-producer-perf-test.sh）进行压测，可以查看哪个地方出现了瓶颈（CPU、内存、网络IO）。<strong>一般都是网络IO达到瓶颈</strong>  </p>
<p><strong>写入10w消息压测结果</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop ~]$ kafka-producer-perf-test.sh --topic logs --num-records 100000 --record-size 1000  --throughput 2000 --producer-props bootstrap.servers=hadoop:9092</span><br><span class="line"></span><br><span class="line">10002 records sent, 1999.6 records/sec (1.91 MB/sec), 30.1 ms avg latency, 608.0 ms max latency.</span><br><span class="line">9990 records sent, 1997.6 records/sec (1.91 MB/sec), 1.4 ms avg latency, 28.0 ms max latency.</span><br><span class="line">10022 records sent, 2004.4 records/sec (1.91 MB/sec), 0.9 ms avg latency, 13.0 ms max latency.</span><br><span class="line">9998 records sent, 1999.6 records/sec (1.91 MB/sec), 1.0 ms avg latency, 13.0 ms max latency.</span><br><span class="line">9986 records sent, 1996.4 records/sec (1.90 MB/sec), 0.9 ms avg latency, 12.0 ms max latency.</span><br><span class="line">10022 records sent, 2004.4 records/sec (1.91 MB/sec), 0.7 ms avg latency, 21.0 ms max latency.</span><br><span class="line">10002 records sent, 2000.0 records/sec (1.91 MB/sec), 0.5 ms avg latency, 12.0 ms max latency.</span><br><span class="line">10002 records sent, 2000.0 records/sec (1.91 MB/sec), 0.4 ms avg latency, 11.0 ms max latency.</span><br><span class="line">10004 records sent, 2000.4 records/sec (1.91 MB/sec), 0.4 ms avg latency, 12.0 ms max latency.</span><br><span class="line">100000 records sent, 1999.000500 records/sec (1.91 MB/sec), 3.68 ms avg latency, 608.00 ms max latency, 1 ms 50th, 3 ms 95th, 164 ms 99th, 218 ms 99.9th.</span><br><span class="line"></span><br><span class="line">--topic topic名称，此处为logs</span><br><span class="line">--num-records 总共需要发送的消息数，此处为100000</span><br><span class="line">--record-size 每个记录的字节数，此处为1000</span><br><span class="line">--throughput 每秒钟发送的记录数，此处为2000，如果设置为-1，则表示不限流，可以测出生产者最大吞吐量</span><br><span class="line">--producer-props bootstrap.servers=hadoop:9092 发送端的配置信息，此处使用默认端口号9092</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">消息写入测试结果解析：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">本例中写入10w条消息为例，每秒平均向Kafka写入了1.91MB的数据，大概是1999.000条消息/秒，每次写入的平均延迟为3.68毫秒，最大的延迟为608毫秒。</span></span><br></pre></td></tr></table></figure>

<p><strong>消费10w消息压测结果</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[xiaokang@hadoop ~]$ kafka-consumer-perf-test.sh --broker-list hadoop:9092 --topic logs --fetch-size 1048576 --messages 100000 --threads 1</span><br><span class="line"></span><br><span class="line">start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec</span><br><span class="line">2020-07-03 19:33:36:119, 2020-07-03 19:33:39:595, 95.3674, 27.4360, 100000, 28768.6997, 1593776018209, -1593776014733, -0.0000, -0.0001</span><br><span class="line"></span><br><span class="line">--broker-list 指定Kafka的链接信息，此处为hadoop:9092</span><br><span class="line">--topic 指定Topic的名称，此处为logs，即上面写入的消息</span><br><span class="line">--fetch-size 指定每次fetch的数据的大小，本例为1048576（1M）</span><br><span class="line">--messages 总共要消费的消息个数，此处为100000，10w</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">消息消费测试结果解析：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">本例中消费10w条消息为例总共消费了95.3674M的数据，每秒消费数据大小为27.4360M，总共消费了100000条消息，每秒消费28768.6997条消息。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Kafka机器数量计算"><a href="#3-Kafka机器数量计算" class="headerlink" title="3. Kafka机器数量计算"></a>3. Kafka机器数量计算</h3><p>Kafka机器数量=2*（峰值生产速度*副本数/100）+1</p>
<p>一般我们会先拿到峰值生产速度（写入消息时每秒写入的数据量），再根据设定的副本数就可以预估出需要部署Kafka的数量</p>
<p>一般峰值生产速度在50M/s，副本数为2，这样得出Kafka机器数量=2*（50*2/100）+1=3台</p>
<h3 id="4-生产者生产数据过程"><a href="#4-生产者生产数据过程" class="headerlink" title="4. 生产者生产数据过程"></a>4. 生产者生产数据过程</h3><p>以kafka-console-producer.sh 命令为例：<br>该运行命令会启动ConsoleProducer进程，ConsoleProducer初始化过程中会创建KafkaProducer对象。KafkaProducer首先将消息数据封装成ProducerRecord，ProducerRecord对象会对消息进行序列化（涉及到网络传输），之后会被RecordAccumulator消息记录器进行收集，进而放在消息队列缓冲池（ConcurrentMap）。消息缓冲池中对象是以batch存在（一次一批数据）。KafkaProducer在进行初始化的时候会创建NetworkClient对象。NetworkClient主要作用负责管理客户端与服务端的网络通信，并且是以NIO的形式发送消息（同步或异步发送均可）。最后由后台sender线程将数据从缓冲池队列中拉取过来，以批量的形式将数据发送到客户端</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">NetworkClient：三大核心功能</span></span><br><span class="line"><span class="attr">1.ready()：主要建立与broker链接。NetworkClient连接到kafka集群中存活的节点</span></span><br><span class="line"><span class="attr">2.send()：用来将客户端请求发送到请求队列中，进而会通过网络选择器将请求最终发送到Kafka集群存活的节点</span></span><br><span class="line"><span class="attr">3.poll()：用来通过socket请求读取客户端的响应。一般poll()是循环操作</span></span><br></pre></td></tr></table></figure>

<h3 id="5-消费者消费数据过程"><a href="#5-消费者消费数据过程" class="headerlink" title="5. 消费者消费数据过程"></a>5. 消费者消费数据过程</h3><p>客户端代理对象KafkaConsumer通过subscribe订阅主题，并且通过poll拉取数据，最后通过commitSync方法提交消费者消费状态（维护offset值）。拉取数据是以特定的时间参数轮询的批量拉取数据，并将拉取的结果缓存到ConsumerRecords，最后通过迭代ConsumerRecords对象获取每一条数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ConsumerCoordinator：KafkaConsumer协调器对象，主要负责与服务端进行交互，比如自动提交offset、心跳检测、再平衡操作、跟踪kafka元数据</span><br><span class="line">Fetcher：拉取数据管理器，负责拉取数据并且接受客户端响应</span><br><span class="line">ConsumerNetworkClient：主要负责与Kafka服务节点进行连接，发送拉取数据请求</span><br><span class="line"></span><br><span class="line">max.poll.records ：每次轮询获取最大批量的数据条数 默认500条</span><br></pre></td></tr></table></figure>

<h3 id="6-一些Kafka经验值"><a href="#6-一些Kafka经验值" class="headerlink" title="6. 一些Kafka经验值"></a>6. 一些Kafka经验值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kafka的日志保存时间，默认7天</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Kafka硬盘大小多大合适？</span></span><br><span class="line"><span class="attr">每天的数据量*7天/70%</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Kafka监控器：KafkaManager、KafkaMonitor、kafkaeagle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Kafka分区数设置多少合适？</span></span><br><span class="line"><span class="attr">分区数并不是越多越好，一般分区数不要超过集群机器数量。分区数越多占用内存越大（ISR等），一个节点集中的分区也就越多，当它宕机的时候，对系统的影响也就越大。分区数一般设置为：3-10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">副本数设置多少合适？</span></span><br><span class="line"><span class="attr">一般设置成2个或3个，大部分企业设置为2个</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Topic搞多少个合适？</span></span><br><span class="line"><span class="attr">通常情况下多少个日志类型就多少个Topic，也有对日志类型进行合并的</span></span><br></pre></td></tr></table></figure>

<h3 id="7-一条消息如何确定分区？"><a href="#7-一条消息如何确定分区？" class="headerlink" title="7. 一条消息如何确定分区？"></a>7. 一条消息如何确定分区？</h3><p>KafkaProducer提供了三种方式来让一条消息确定分区</p>
<p>1.通过ProducerRecord对象中partition属性指定分区id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerRecord</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">        <span class="comment">//分区</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer partition;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Headers headers;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span> </span>&#123;</span><br><span class="line">        		<span class="keyword">this</span>(topic, partition, timestamp, key, value, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka消息被封装成ProducerRecord，在创建时可以通过构造函数指定partitionId</span></span><br></pre></td></tr></table></figure>

<p>2.未指定partitionId，但key不为空，此时根据key的hash值进行分区</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(ProducerRecord&lt;K, V&gt; record, <span class="keyword">byte</span>[]serializedKey, <span class="keyword">byte</span>[] serializedValue, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        Integer partition = record.partition();</span><br><span class="line">        <span class="keyword">return</span> partition != <span class="keyword">null</span> ?</span><br><span class="line">        partition :</span><br><span class="line">        partitioner.partition(</span><br><span class="line">        record.topic(), record.key(), serializedKey,record.value(), serializedValue, cluster);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line"><span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line"><span class="comment">// 根据key字节数组的hash值和分区数量进行取模得到paritionId。在partition数量不变的情况，相同的key值数据可以被分配到相同的partition</span></span><br></pre></td></tr></table></figure>

<p>3.未指定partitionId，同时key也为null，此时会采用轮询的方式将消息均衡的分配到不同分区中（默认情况下key就是null）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算轮询值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">nextValue</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        AtomicInteger counter = topicCounterMap.get(topic);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == counter) &#123;</span><br><span class="line">                counter = <span class="keyword">new</span> AtomicInteger(ThreadLocalRandom.current().nextInt());</span><br><span class="line">                AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter);</span><br><span class="line">                <span class="keyword">if</span> (currentCounter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                		counter = currentCounter;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    	<span class="keyword">return</span> counter.getAndIncrement();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//key为空采用轮询方式均衡分配到不同Id</span></span><br><span class="line"><span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextValue = nextValue(topic);</span><br><span class="line">        List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> part = Utils.toPositive(nextValue) %availablePartitions.size();</span><br><span class="line">                <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// no partitions are available, give a nonavailable partition</span></span><br><span class="line">                <span class="keyword">return</span> Utils.toPositive(nextValue) % numPartitions;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-可用性和可靠性保证机制"><a href="#8-可用性和可靠性保证机制" class="headerlink" title="8. 可用性和可靠性保证机制"></a>8. 可用性和可靠性保证机制</h3><p>KafkaProducer发送数据请求，可以通过acks参数确保整个提交请求完成。acks主要是设置Producer在确认一条消息发送完成之前需要收到的反馈信息。  </p>
<p>acks=0，相当于异步发送，表示不等待任何服务器反馈消息，消息发送完毕即offset增加，继续生产。</p>
<p>优点：发送效率比较高，能够适应高并发场景。<br>缺点：不能够有效保证数据不丢失<br>适用场景：对于数据准确定要求不高的实时系统，登录、操作等log日志  </p>
<p>acks=1，leader收到leader replica 对一个消息的接受ack才增加offset，然后继续生产。</p>
<p>优点：该配置能够确保每个partition的leader节点能够成功的接收消息<br>缺点：不能够保证partition的副本节点接收到数据，该种情况有可能造成数据丢失。leader接收到消息后宕机，此时该partition的其他副本没有同步到该消息，这样就造成数据丢失</p>
<p>acks=-1/all，leader收到所有replica 对一个消息的接受ack才增加offset，然后继续生产。</p>
<p>优点：该配置能够最大限度的保证数据持久化并且不丢失<br>缺点：降低系统响应速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该参数表示成功写入最小副本数</span></span><br><span class="line">min.insync.replicas=2 表示只要是能够写入2个副本就表示成功。</span><br><span class="line">生产环境下一般配合acks=-1使用，这样能够兼顾数据安全和响应速度  </span><br></pre></td></tr></table></figure>

<h3 id="9-ISR机制"><a href="#9-ISR机制" class="headerlink" title="9. ISR机制"></a>9. ISR机制</h3><p>ISR（In-Sync Replicas），副本同步队列。ISR中包括Leader和Follower，Leader副本负责维护和跟踪ISR集合中所有Follower副本的。当Follower副本同步Leader数据时，如果滞后太多或者失效的话，Leader会将Follower从ISR列表中移除从而转移到OSR。OSR集合中Follower一旦追上Leader副本，那么Leader会将该Follower从OSR集合转移到ISR中。当Leader副本发生故障时，只有在ISR集合的副本会有资格选举成Leader。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">replica.lag.time.max.ms=10000 单位毫秒：表示follower在规定的时间内没有同步完成Leader数据，将会被剔除从而到OSR中</span><br></pre></td></tr></table></figure>

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/BigData/Kafka/kafka-isr.png"/> </div>

<h3 id="10-Kafka幂等性和数据重复"><a href="#10-Kafka幂等性和数据重复" class="headerlink" title="10. Kafka幂等性和数据重复"></a>10. Kafka幂等性和数据重复</h3><p>Producer的幂等性指的是当发送同一条消息时，数据在Server端只会被持久化一次，数据不丟不重，但是这里的幂等性是有条件的：</p>
<p>1）<strong>只能保证Producer在单个会话内不丟不重，如果Producer出现意外而挂掉再重启是无法保证的</strong>（幂等性情况下，是无法获取之前的状态信息，因此是无法做到跨会话级别的不丢不重）。</p>
<p>2）幂等性不能跨多个Topic-Partition，<strong>只能保证单个Partition内的幂等性</strong>，当涉及多个Topic-Partition时，这中间的状态并没有同步。</p>
<p>解决数据重复：开启幂等性+ack=-1+事务  </p>
<h3 id="11-Kafka参数优化"><a href="#11-Kafka参数优化" class="headerlink" title="11. Kafka参数优化"></a>11. Kafka参数优化</h3><p><strong>Broker参数配置（server.properties）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">broker处理消息的最大线程数（默认为3）</span></span><br><span class="line">num.network.threads=cpu核数+1</span><br><span class="line"><span class="meta">#</span><span class="bash"> broker处理磁盘IO的线程数</span> </span><br><span class="line">num.io.threads=cpu核数*2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每当producer写入10000条消息时，刷数据到磁盘</span> </span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每间隔1秒钟时间，刷数据到磁盘</span></span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保留三天，也可以更短 （log.cleaner.delete.retention.ms）</span></span><br><span class="line">log.retention.hours=72</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个参数指新创建一个topic时，默认的Replica数量,Replica过少会影响数据的可用性，太多则会白白浪费存储资源，一般建议在2~3为宜。</span></span><br><span class="line">offsets.topic.replication.factor:3</span><br></pre></td></tr></table></figure>

<p><strong>Producer优化（producer.properties）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在Producer端用来存放尚未发送出去的Message的缓冲区大小。缓冲区满了之后可以选择阻塞发送或抛出异常，由block.on.buffer.full的配置来决定。</span></span><br><span class="line">buffer.memory:33554432 (32m)</span><br><span class="line"><span class="meta">#</span><span class="bash">默认发送不进行压缩，推荐配置一种适合的压缩算法，可以大幅度的减缓网络压力和Broker的存储压力。</span></span><br><span class="line">compression.type:none</span><br></pre></td></tr></table></figure>

<p><strong>Consumer优化</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Consumer的个数，适当增加可以提高并发度。</span></span><br><span class="line">num.consumer.fetchers:1</span><br><span class="line"><span class="meta">#</span><span class="bash">每次Fetch Request至少要拿到多少字节的数据才可以返回。</span></span><br><span class="line">fetch.min.bytes:1</span><br><span class="line"><span class="meta">#</span><span class="bash">在Fetch Request获取的数据至少达到fetch.min.bytes之前，允许等待的最大时长。对应上面说到的Purgatory中请求的超时时间。</span></span><br><span class="line">fetch.wait.max.ms:100</span><br></pre></td></tr></table></figure>

<p><strong>Kafka内存调整（kafka-server-start.sh）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认内存1个G，生产环境尽量不要超过6个G。</span></span><br><span class="line">export KAFKA_HEAP_OPTS=&quot;-Xms4g -Xmx4g&quot;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>手把手教你做一份儿在线简历</title>
    <url>/2021/04/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%81%9A%E4%B8%80%E4%BB%BD%E5%84%BF%E5%9C%A8%E7%BA%BF%E7%AE%80%E5%8E%86/</url>
    <content><![CDATA[<blockquote>
<p>微信公众号：小康新鲜事儿</p>
</blockquote>
<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>node-12.16.3、git-2.26.2.windows.1、Typora、Windows10</p>
<p>源码：<a href="https://github.com/xiaokangxxs/note/blob/master/noteSourceCode/profile.md">https://github.com/xiaokangxxs/note/blob/master/noteSourceCode/profile.md</a></p>
<p>演示地址：<a href="https://xiaokangxxs.github.io/note/profile/">https://xiaokangxxs.github.io/note/profile/</a> or <a href="https://xiaokang_188.gitee.io/note/profile/">https://xiaokang_188.gitee.io/note/profile/</a></p>
<h2 id="一、安装nodeppt"><a href="#一、安装nodeppt" class="headerlink" title="一、安装nodeppt"></a>一、安装nodeppt</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\xiaok&gt;npm install -g nodeppt</span><br><span class="line"></span><br><span class="line">+ nodeppt@2.2.2</span><br><span class="line">added 1 package from 1 contributor, removed 2 packages and updated 13 packages in 52.997s</span><br></pre></td></tr></table></figure>

<h2 id="二、编写简历"><a href="#二、编写简历" class="headerlink" title="二、编写简历"></a>二、编写简历</h2><h3 id="2-1-使用nodeppt生成模板文件"><a href="#2-1-使用nodeppt生成模板文件" class="headerlink" title="2.1 使用nodeppt生成模板文件"></a>2.1 使用nodeppt生成模板文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\NodePPT\nodeppt-在线简历制作&gt;nodeppt new profile.md</span><br><span class="line">? Input your presentation topic:  个人简历</span><br><span class="line">? Input your name:  小康&amp;小康新鲜事儿</span><br><span class="line"></span><br><span class="line">�  profile.md create success!</span><br><span class="line"></span><br><span class="line">──────────────────── �  Success! ────────────────────</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     ┌────────────────────────────────────────────┐</span><br><span class="line">     │  To get started: nodeppt serve profile.md  │</span><br><span class="line">     └────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3 id="2-2-改写内容"><a href="#2-2-改写内容" class="headerlink" title="2.2 改写内容"></a>2.2 改写内容</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 小康个人简历</span><br><span class="line">speaker: 小康&amp;小康新鲜事儿</span><br><span class="line">url: https://www.xiaokang.cool/</span><br><span class="line">prismTheme: solarizedlight </span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span> <span class="attr">class</span>=<span class="string">&quot;bg-black aligncenter&quot;</span> <span class="attr">image</span>=<span class="string">&quot;https://cn.bing.com/az/hprichbg/rb/PragueChristmas_EN-AU8649790921_1920x1080.jpg .dark&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 个人简历 &#123;.text-landing.text-shadow.text-landing.animated.fadeInRight&#125;</span></span><br><span class="line"></span><br><span class="line">小康 &#123;.text-intro&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span>   翻页\: ↑/↓/←/→ Space Home End</span><br><span class="line"><span class="bullet">-</span>   全屏\: F</span><br><span class="line"><span class="bullet">-</span>   预览\: -/+</span><br><span class="line"><span class="bullet">-</span>   网格背景\: Enter</span><br><span class="line"></span><br><span class="line">[<span class="string">:fa-envelope: Email</span>](<span class="link">mailto:xiaokang.188@qq.com</span>)&#123;.button.ghost.animated.flipInX.delay-1200&#125;</span><br><span class="line"></span><br><span class="line">:::footer</span><br><span class="line">[<span class="string">:fa-comments: 小康新鲜事儿</span>](<span class="link">https://mp.weixin.qq.com/s/3-3_Ns5nDIhcB7TS7d-ocA</span>)&#123;.alignright&#125;</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::cta</span><br><span class="line">::![](https://boyue-file.oss-cn-beijing.aliyuncs.com/profile/picture.png)::</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">#### 小康<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="section">##### 求职意向：大数据开发工程师<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="section">##### 出生年月：1997.11&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;电话：1583223xxxx<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="section">##### 籍&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;贯：河北保定&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;邮箱：xiaokang.188@qq.com</span></span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 教育背景</span></span><br><span class="line">2016.09-2020.06&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xxxx学校&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;计算机科学与技术&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本科</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">## 专业技能</span></span><br><span class="line">1.熟练掌握JAVA，了解Scala编程语言，拥有良好的编程习惯。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">2.熟悉Linux常用命令，熟练使用Shell编写脚本。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">3.熟悉Hadoop运行原理以及高可用部署安装，掌握HDFS的存储机制。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">4.熟练使用Flume、Sqoop、DataX实现数据采集、迁移。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">5.熟练使用Hive进行数据分析，掌握自定义UDF。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">6.熟悉Kafka工作原理，了解Kafka的Topic消息处理模式和消息分区备份机制。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">7.熟悉分布式数据库HBase工作原理，具备一定的HBase调优经验。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">8.了解离线多维分析Kylin的基本使用。</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 工作经历</span></span><br><span class="line">时间：2019.06-2020.06<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">职位：大数据开发实习生<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">公司：xxxx有限公司<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">职责：1.参与大数据平台搭建与维护&amp;nbsp;2.协助完成Hive中的数据分析&amp;nbsp;3.完成与工作相关的技术文档编写</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 项目经验-1</span></span><br><span class="line">项目名称：用户兴趣取向预测离线数据分析平台<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">技术架构：Flume+Kafka+HBase+Zookeeper+Hive+Hadoop+Sqoop+MySQL<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">项目描述：该项目是为活动举办方开发的活动分析预测大数据平台，通过Flume将第三方数据导入Kafka，通过Kafka流处理将数据放入HBase中。使用Hive关联HBase中的数据进行分析，将分析结果送到机器学习组进行建模，最终将分析预测结果送入HBase，导出到MySQL中并使用Tableau进行可视化展示，为企业活动举办提供决策支撑。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">主要职责：<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;1.参与大数据平台搭建与维护。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;2.通过Flume采集数据到Kafka。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;3.协助完成Hive中的数据分析。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;4.完成与工作相关的技术文档编写。</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 项目经验-2</span></span><br><span class="line">项目名称：用户兴趣取向预测离线数据分析平台<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">技术架构：Flume+Kafka+HBase+Zookeeper+Hive+Hadoop+Sqoop+MySQL<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">项目描述：该项目是为活动举办方开发的活动分析预测大数据平台，通过Flume将第三方数据导入Kafka，通过Kafka流处理将数据放入HBase中。使用Hive关联HBase中的数据进行分析，将分析结果送到机器学习组进行建模，最终将分析预测结果送入HBase，导出到MySQL中并使用Tableau进行可视化展示，为企业活动举办提供决策支撑。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">主要职责：<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;1.参与大数据平台搭建与维护。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;2.通过Flume采集数据到Kafka。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;3.协助完成Hive中的数据分析。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;4.完成与工作相关的技术文档编写。</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 项目经验-3</span></span><br><span class="line">项目名称：用户兴趣取向预测离线数据分析平台<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">技术架构：Flume+Kafka+HBase+Zookeeper+Hive+Hadoop+Sqoop+MySQL<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">项目描述：该项目是为活动举办方开发的活动分析预测大数据平台，通过Flume将第三方数据导入Kafka，通过Kafka流处理将数据放入HBase中。使用Hive关联HBase中的数据进行分析，将分析结果送到机器学习组进行建模，最终将分析预测结果送入HBase，导出到MySQL中并使用Tableau进行可视化展示，为企业活动举办提供决策支撑。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">主要职责：<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;1.参与大数据平台搭建与维护。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;2.通过Flume采集数据到Kafka。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;3.协助完成Hive中的数据分析。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">&amp;nbsp;&amp;nbsp;4.完成与工作相关的技术文档编写。</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span>&gt;</span></span></span><br><span class="line">:::&#123;.content-center&#125;</span><br><span class="line">:::flexblock &#123;.specs&#125;</span><br><span class="line"><span class="section">## 自我评价</span></span><br><span class="line">1.善于学习总结，乐于分享，运营个人公众号&quot;小康新鲜事儿&quot;。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">2.抗压能力强，能快速适应公司的开发环境，能快速融入、凝聚团队。<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">3.良好的表达与沟通能力，积极主动，对工作尽心尽责。</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slide</span> <span class="attr">class</span>=<span class="string">&quot;bg-black-blue aligncenter&quot;</span> <span class="attr">image</span>=<span class="string">&quot;https://cn.bing.com/az/hprichbg/rb/PragueChristmas_EN-AU8649790921_1920x1080.jpg .dark&quot;</span>&gt;</span></span></span><br><span class="line"><span class="section">## 感谢您查看我的简历 &#123;.animated.tada&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">[<span class="string">:fa-cloud-download: nodeppt提供服务</span>](<span class="link">https://github.com/ksky521/nodeppt</span>)&#123;.button.animated.delay-1s.fadeInUp&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-本地预览效果"><a href="#2-3-本地预览效果" class="headerlink" title="2.3 本地预览效果"></a>2.3 本地预览效果</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\NodePPT\nodeppt-在线简历制作&gt;nodeppt serve profile.md</span><br><span class="line"></span><br><span class="line">  NodePPT running at:</span><br><span class="line">  - Url: http://192.168.56.1:8081/</span><br><span class="line">  - Speaker Mode: http://192.168.56.1:8081/?mode=speaker</span><br></pre></td></tr></table></figure>

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/profile-local.png"/> </div>
## 三、部署

<h3 id="3-1-GitHub上创建一个项目"><a href="#3-1-GitHub上创建一个项目" class="headerlink" title="3.1 GitHub上创建一个项目"></a>3.1 GitHub上创建一个项目</h3><div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/github-1.png"/> </div>
把地址记下来：[https://github.com/xiaokangxxs/nodeppt-profile.git](https://github.com/xiaokangxxs/nodeppt-profile.git)

<h3 id="3-2-打包本地项目"><a href="#3-2-打包本地项目" class="headerlink" title="3.2 打包本地项目"></a>3.2 打包本地项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\NodePPT\nodeppt-在线简历制作&gt;nodeppt build profile.md</span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully in 5387ms</span><br></pre></td></tr></table></figure>

<h3 id="3-3-将本地项目提交至GitHub"><a href="#3-3-将本地项目提交至GitHub" class="headerlink" title="3.3 将本地项目提交至GitHub"></a>3.3 将本地项目提交至GitHub</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加远程库地址</span></span><br><span class="line">git remote add nodepptProfile https://github.com/xiaokangxxs/nodeppt-profile.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将所有文件提交至暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交至本地库</span></span><br><span class="line">git commit -m &quot;init profile&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送至GitHub远程库</span></span><br><span class="line">git push nodepptProfile master</span><br></pre></td></tr></table></figure>

<h3 id="3-4-开启GitHub-Pages"><a href="#3-4-开启GitHub-Pages" class="headerlink" title="3.4 开启GitHub Pages"></a>3.4 开启GitHub Pages</h3><div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/github-2.png"/> </div>
### 3.5 查看效果

<p>开启GitHub Pages后稍等片刻即可访问制作的简历，地址：<a href="https://xiaokangxxs.github.io/nodeppt-profile/dist/profile.html">https://xiaokangxxs.github.io/nodeppt-profile/dist/profile.html</a></p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/github-3.png"/> </div>
### 3.6 部署至码云（访问速度更快）

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/gitee-1.png"/> </div>
将`3.1`中的地址复制过来

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/gitee-2.png"/> </div>
点击`导入`后，来到代码主界面，点击`服务`选择`Gitee Pages`，按照下图配置后点击启动

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/gitee-3.png"/> </div>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/gitee-4.png"/> </div>
地址：[https://xiaokang_188.gitee.io/nodeppt-profile/dist/profile.html](https://xiaokang_188.gitee.io/nodeppt-profile/dist/profile.html)，最终效果如下图所示：

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/profile/product.png"/> </div>
## 四、写在最后

<p>此文档记录了如何使用 nodeppt 结合 GitHub 和 Gitee 制作一份儿在线简历！另外，nodeppt 官方GitHub上也有相应的教程，不过我的这个文档比较贴合实际，方便大家快速上手。 记得三连哦！！！最后附上视频链接地址：<a href="https://www.bilibili.com/video/BV1ot4y1Q7ne">手把手教你做一份儿在线简历</a></p>
]]></content>
  </entry>
  <entry>
    <title>RDD常用算子</title>
    <url>/2021/04/24/RDD%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90/</url>
    <content><![CDATA[<h2 id="一、Transformation"><a href="#一、Transformation" class="headerlink" title="一、Transformation"></a>一、Transformation</h2><p>Spark常用的Transformation算子如下表：</p>
<table>
<thead>
<tr>
<th>Transformation 算子</th>
<th>Meaning（含义）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>map</strong>(<em>func</em>)</td>
<td>对原RDD中每个元素运用<em>func</em>函数，并生成新的RDD</td>
</tr>
<tr>
<td><strong>filter</strong>(<em>func</em>)</td>
<td>对原RDD中每个元素使用<em>func</em>函数进行过滤，并生成新的RDD</td>
</tr>
<tr>
<td><strong>flatMap</strong>(<em>func</em>)</td>
<td>与map类似，但是每一个输入的item被映射成0个或多个输出的items（ <em>func</em>返回类型需要为Seq）。</td>
</tr>
<tr>
<td><strong>mapPartitions</strong>(<em>func</em>)</td>
<td>与map类似，但函数单独在RDD的每个分区上运行， <em>func</em>函数的类型为*Iterator&lt;T&gt; =&gt; Iterator&lt;U&gt;*，其中T是RDD的类型，即RDD[T]</td>
</tr>
<tr>
<td><strong>mapPartitionsWithIndex</strong>(<em>func</em>)</td>
<td>与mapPartitions类似，但<em>func</em>类型为 (Int,Iterator&lt;T&gt;) =&gt; Iterator&lt;U&gt;，其中第一个参数为分区索引</td>
</tr>
<tr>
<td><strong>sample</strong>(<em>withReplacement</em>, <em>fraction</em>, <em>seed</em>)</td>
<td>数据采样，有三个可选参数：设置是否放回（withReplacement）、采样的百分比（<em>fraction</em>）、随机数生成器的种子（seed）。</td>
</tr>
<tr>
<td><strong>union</strong>(<em>otherDataset</em>)</td>
<td>合并两个RDD</td>
</tr>
<tr>
<td><strong>intersection</strong>(<em>otherDataset</em>)</td>
<td>求两个RDD的交集</td>
</tr>
<tr>
<td><strong>distinct</strong>([<em>numTasks</em>]))</td>
<td>去重</td>
</tr>
<tr>
<td><strong>groupByKey</strong>([<em>numTasks</em>])</td>
<td>按照key值进行分区，即在一个 (K, V) 对的dataset上调用时，返回一个 (K, Iterable&lt;V&gt;) <strong>Note:</strong> 如果分组是为了在每一个key上执行聚合操作（例如，sum 或 average)，此时使用 <code>reduceByKey</code> 或<code>aggregateByKey</code> 性能会更好<strong>Note:</strong> 默认情况下，并行度取决于父 RDD 的分区数。可以传入 <code>numTasks</code> 参数进行修改。</td>
</tr>
<tr>
<td><strong>reduceByKey</strong>(<em>func</em>, [<em>numTasks</em>])</td>
<td>按照key值进行分组，并对分组后的数据执行归约操作（于groupByKey相比，reduceByKey会有提前combine操作）。</td>
</tr>
<tr>
<td><strong>aggregateByKey</strong>(<em>zeroValue</em>,<em>numPartitions</em>)(<em>seqOp</em>, <em>combOp</em>, [<em>numTasks</em>])</td>
<td>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和zeroValue聚合每个键的值。与groupByKey类似，reduce任务的数量可通过第二个参数进行配置。</td>
</tr>
<tr>
<td><strong>sortByKey</strong>([<em>ascending</em>], [<em>numTasks</em>])</td>
<td>按照key进行排序，其中的key需要实现Ordered特质，即可比较</td>
</tr>
<tr>
<td><strong>join</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td>
<td>在一个 (K, V) 和 (K, W) 类型的dataset上调用时，返回一个 (K, (V, W)) pairs 的dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</td>
</tr>
<tr>
<td><strong>cogroup</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td>
<td>在一个 (K, V) 对的dataset上调用时，返回一个 (K, (Iterable&lt;V&gt;, Iterable&lt;W&gt;)) tuples的dataset。</td>
</tr>
<tr>
<td><strong>cartesian</strong>(<em>otherDataset</em>)</td>
<td>在一个T和U类型的dataset上调用时，返回一个 (T, U) 类型的dataset（即笛卡尔积）。</td>
</tr>
<tr>
<td><strong>coalesce</strong>(<em>numPartitions</em>)</td>
<td>将RDD中的分区数减少为numPartitions。</td>
</tr>
<tr>
<td><strong>repartition</strong>(<em>numPartitions</em>)</td>
<td>随机重新调整RDD中的数据以创建更多或更少的分区，并在它们之间进行平衡。</td>
</tr>
<tr>
<td><strong>repartitionAndSortWithinPartitions</strong>(<em>partitioner</em>)</td>
<td>根据给定的partitioner（分区器）对RDD进行重新分区，并对分区中的数据按照key值进行排序。这比调用 <code>repartition</code> 然后再sorting（排序）效率更高，因为它可以将排序过程推送到shuffle操作所在的机器。</td>
</tr>
</tbody></table>
<p>下面给出部分算子的基本使用示例：</p>
<h3 id="1-1-map"><a href="#1-1-map" class="headerlink" title="1.1 map"></a>1.1 map</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).map(_ * <span class="number">2</span>).foreach(println)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-filter"><a href="#1-2-filter" class="headerlink" title="1.2 filter"></a>1.2 filter</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).filter(_ &gt;= <span class="number">2</span>).foreach(println)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-flatMap"><a href="#1-3-flatMap" class="headerlink" title="1.3 flatMap"></a>1.3 flatMap</h3><p><code>flatMap(func)</code> 与 <code>map</code> 类似，但每一个输入的item会被映射成0个或多个输出的items（<em>func</em>返回类型需要为<code>Seq</code>）。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">4</span>), <span class="type">List</span>(), <span class="type">List</span>(<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).flatMap(_.toList).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>flatMap在日志分析中使用概率非常高，这里进行一下演示：拆分输入的每行数据为单个单词，并赋值为1，代表出现一次，之后按照单词分组并统计其出现总次数，代码如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> lines=<span class="type">List</span>(<span class="string">&quot;spark flume xiaokang spark scala&quot;</span>,<span class="string">&quot;hadoop scala xiaokangxxs xiaokang flume hive&quot;</span>)</span><br><span class="line">scala&gt; sc.parallelize(lines).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).foreach(println)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">(xiaokangxxs,<span class="number">1</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hive,<span class="number">1</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(flume,<span class="number">2</span>)</span><br><span class="line">(xiaokang,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-mapPartitions"><a href="#1-4-mapPartitions" class="headerlink" title="1.4 mapPartitions"></a>1.4 mapPartitions</h3><p>与map类似，但函数单独在RDD的每个分区上运行， <em>func</em>函数的类型为<code>Iterator&lt;T&gt; =&gt; Iterator&lt;U&gt;</code> (其中T是RDD的类型)，即输入和输出都必须是可迭代类型。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">scala&gt; sc.parallelize(list, <span class="number">3</span>).mapPartitions(iterator =&gt; &#123;</span><br><span class="line">     |   <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">Int</span>]</span><br><span class="line">     |   <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">     |      buffer.append(iterator.next()*<span class="number">3</span>)</span><br><span class="line">     |   &#125;</span><br><span class="line">     |   buffer.toIterator&#125;).foreach(println)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-mapPartitionsWithIndex"><a href="#1-5-mapPartitionsWithIndex" class="headerlink" title="1.5 mapPartitionsWithIndex"></a>1.5 mapPartitionsWithIndex</h3><p>  与mapPartitions类似，但<em>func</em>类型为 <code>(Int, Iterator&lt;T&gt;) =&gt; Iterator&lt;U&gt;</code> ，其中第一个参数为分区索引。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">scala&gt; sc.parallelize(list, <span class="number">3</span>).mapPartitionsWithIndex((index,iterator) =&gt; &#123;</span><br><span class="line">     |   <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">String</span>]</span><br><span class="line">     |   <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">     |      buffer.append(index+<span class="string">&quot;---&quot;</span>+iterator.next()*<span class="number">3</span>)</span><br><span class="line">     |   &#125;</span><br><span class="line">     |   buffer.toIterator&#125;).foreach(println)</span><br><span class="line"><span class="number">0</span>--<span class="number">-3</span></span><br><span class="line"><span class="number">0</span>--<span class="number">-3</span></span><br><span class="line"><span class="number">1</span>--<span class="number">-6</span></span><br><span class="line"><span class="number">1</span>--<span class="number">-12</span></span><br><span class="line"><span class="number">2</span>--<span class="number">-18</span></span><br><span class="line"><span class="number">2</span>--<span class="number">-24</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-sample"><a href="#1-6-sample" class="headerlink" title="1.6 sample"></a>1.6 sample</h3><p>数据采样。有三个可选参数：设置是否放回 (withReplacement)、采样的百分比 (fraction)、随机数生成器的种子 (seed) ：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).sample(withReplacement=<span class="literal">false</span>,fraction=<span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">scala&gt; sc.parallelize(list).sample(withReplacement=<span class="literal">false</span>,fraction=<span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">scala&gt; sc.parallelize(list).sample(withReplacement=<span class="literal">false</span>,fraction=<span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">scala&gt; sc.parallelize(list).sample(withReplacement=<span class="literal">false</span>,fraction=<span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-union"><a href="#1-7-union" class="headerlink" title="1.7 union"></a>1.7 union</h3><p>合并两个RDD：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list1=<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> list2=<span class="type">List</span>(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line">scala&gt; sc.parallelize(list1).union(sc.parallelize(list2)).foreach(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-intersection"><a href="#1-8-intersection" class="headerlink" title="1.8 intersection"></a>1.8 intersection</h3><p>求两个 RDD 的交集：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list1=<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> list2=<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>)</span><br><span class="line">scala&gt; sc.parallelize(list1).intersection(sc.parallelize(list2)).foreach(println)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="1-9-distinct"><a href="#1-9-distinct" class="headerlink" title="1.9 distinct"></a>1.9 distinct</h3><p>去重：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).distinct().foreach(println)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="1-10-groupByKey"><a href="#1-10-groupByKey" class="headerlink" title="1.10 groupByKey"></a>1.10 groupByKey</h3><p>按照键进行分组：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;spark&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;xiaokang&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;spark&quot;</span>, <span class="number">6</span>), (<span class="string">&quot;hadoop&quot;</span>, <span class="number">2</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).groupByKey().map(x =&gt; (x._1, x._2.toList)).foreach(println)</span><br><span class="line">(spark,<span class="type">List</span>(<span class="number">3</span>, <span class="number">6</span>))</span><br><span class="line">(hadoop,<span class="type">List</span>(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">(xiaokang,<span class="type">List</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h3 id="1-11-reduceByKey"><a href="#1-11-reduceByKey" class="headerlink" title="1.11 reduceByKey"></a>1.11 reduceByKey</h3><p>按照键进行归约操作：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;spark&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;xiaokang&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;spark&quot;</span>, <span class="number">6</span>), (<span class="string">&quot;hadoop&quot;</span>, <span class="number">2</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).reduceByKey(_+_).foreach(println)</span><br><span class="line">(spark,<span class="number">9</span>)</span><br><span class="line">(hadoop,<span class="number">4</span>)</span><br><span class="line">(xiaokang,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-12-sortBy-amp-sortByKey"><a href="#1-12-sortBy-amp-sortByKey" class="headerlink" title="1.12 sortBy &amp; sortByKey"></a>1.12 sortBy &amp; sortByKey</h3><p>按照键进行排序：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="number">100</span>, <span class="string">&quot;hadoop&quot;</span>), (<span class="number">90</span>, <span class="string">&quot;spark&quot;</span>), (<span class="number">120</span>, <span class="string">&quot;xiaokangxxs&quot;</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).sortByKey(ascending=<span class="literal">false</span>).foreach(println)</span><br><span class="line">(<span class="number">120</span>,xiaokangxxs)</span><br><span class="line">(<span class="number">100</span>,hadoop)</span><br><span class="line">(<span class="number">90</span>,spark)</span><br></pre></td></tr></table></figure>

<p>按照指定元素进行排序：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>,<span class="number">100</span>), (<span class="string">&quot;spark&quot;</span>,<span class="number">90</span>), (<span class="string">&quot;xiaokangxxs&quot;</span>,<span class="number">120</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).sortBy(x=&gt;x._2,ascending=<span class="literal">false</span>).foreach(println)</span><br><span class="line">(xiaokangxxs,<span class="number">120</span>)</span><br><span class="line">(hadoop,<span class="number">100</span>)</span><br><span class="line">(spark,<span class="number">90</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-13-join"><a href="#1-13-join" class="headerlink" title="1.13 join"></a>1.13 join</h3><p>在一个 (K, V) 和 (K, W) 类型的Dataset上调用时，返回一个 (K, (V, W)) 的Dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list1=<span class="type">List</span>((<span class="number">1</span>,<span class="string">&quot;student01&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;student02&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;student03&quot;</span>))</span><br><span class="line">scala&gt; <span class="keyword">val</span> list2=<span class="type">List</span>((<span class="number">1</span>,<span class="string">&quot;teacher01&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;teacher02&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;teacher03&quot;</span>))</span><br><span class="line">scala&gt; sc.parallelize(list1).join(sc.parallelize(list2)).foreach(println)</span><br><span class="line">(<span class="number">1</span>,(student01,teacher01))</span><br><span class="line">(<span class="number">3</span>,(student03,teacher03))</span><br><span class="line">(<span class="number">2</span>,(student02,teacher02))</span><br></pre></td></tr></table></figure>

<h3 id="1-14-cartesian"><a href="#1-14-cartesian" class="headerlink" title="1.14 cartesian"></a>1.14 cartesian</h3><p>计算笛卡尔积：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list1=<span class="type">List</span>(<span class="string">&quot;xiaokang&quot;</span>, <span class="string">&quot;spark&quot;</span>, <span class="string">&quot;flink&quot;</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> list2=<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">scala&gt; sc.parallelize(list1).cartesian(sc.parallelize(list2)).foreach(println)</span><br><span class="line">(xiaokang,<span class="number">1</span>)</span><br><span class="line">(xiaokang,<span class="number">2</span>)</span><br><span class="line">(xiaokang,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">1</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(spark,<span class="number">3</span>)</span><br><span class="line">(flink,<span class="number">1</span>)</span><br><span class="line">(flink,<span class="number">2</span>)</span><br><span class="line">(flink,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-15-aggregateByKey"><a href="#1-15-aggregateByKey" class="headerlink" title="1.15 aggregateByKey"></a>1.15 aggregateByKey</h3><p>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和zeroValue聚合每个键的值。与<code>groupByKey</code>类似，reduce任务的数量可通过第二个参数<code>numPartitions</code>进行配置。示例如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>,<span class="number">3</span>), (<span class="string">&quot;hadoop&quot;</span>,<span class="number">2</span>), (<span class="string">&quot;spark&quot;</span>,<span class="number">4</span>), (<span class="string">&quot;spark&quot;</span>,<span class="number">3</span>), (<span class="string">&quot;storm&quot;</span>,<span class="number">6</span>), (<span class="string">&quot;storm&quot;</span>,<span class="number">8</span>))</span><br><span class="line">scala&gt; sc.parallelize(list,numSlices = <span class="number">2</span>).aggregateByKey(zeroValue = <span class="number">0</span>,numPartitions = <span class="number">3</span>)(</span><br><span class="line">     |  seqOp=math.max(_, _),</span><br><span class="line">     |  combOp=_ + _</span><br><span class="line">     | ).collect.foreach(println)</span><br><span class="line">(hadoop,<span class="number">3</span>)</span><br><span class="line">(storm,<span class="number">8</span>)</span><br><span class="line">(spark,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>numSlices = 2</code>指定aggregateByKey父操作parallelize的分区数量为2，其执行流程如下：</p>
<div align="center"> <img src="https://gitee.com/heibaiying/BigData-Notes/raw/master/pictures/spark-aggregateByKey.png"/> </div>
基于同样的执行流程，如果`numSlices=1`，则意味着只有输入一个分区，则其最后一步combOp相当于是无效的，执行结果为：

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">(hadoop,3)</span></span><br><span class="line"><span class="attr">(storm,8)</span></span><br><span class="line"><span class="attr">(spark,4)</span></span><br></pre></td></tr></table></figure>

<p>同样的，如果每个单词对一个分区，即<code>numSlices=6</code>，此时相当于求和操作，执行结果为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">(hadoop,5)</span></span><br><span class="line"><span class="attr">(storm,14)</span></span><br><span class="line"><span class="attr">(spark,7)</span></span><br></pre></td></tr></table></figure>

<p><code>aggregateByKey(zeroValue=0,numPartitions=3)</code>的第二个参数<code>numPartitions</code> 决定的是输出 RDD 的分区数量，想要验证这个问题，可以对上面代码进行改写，使用<code>getNumPartitions</code>方法获取分区数量：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; sc.parallelize(list,numSlices=<span class="number">6</span>).aggregateByKey(zeroValue=<span class="number">0</span>,numPartitions=<span class="number">3</span>)(</span><br><span class="line">     |   seqOp = math.max(_, _),</span><br><span class="line">     |   combOp = _ + _</span><br><span class="line">     | ).getNumPartitions</span><br><span class="line">res16: <span class="type">Int</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Action"><a href="#二、Action" class="headerlink" title="二、Action"></a>二、Action</h2><p>Spark常用的Action算子如下：</p>
<table>
<thead>
<tr>
<th>Action（动作）</th>
<th>Meaning（含义）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>reduce</strong>(<em>func</em>)</td>
<td>使用函数<em>func</em>执行归约操作</td>
</tr>
<tr>
<td><strong>collect</strong>()</td>
<td>以一个array数组的形式返回dataset的所有元素，适用于小结果集。</td>
</tr>
<tr>
<td><strong>count</strong>()</td>
<td>返回RDD中元素的个数。</td>
</tr>
<tr>
<td><strong>first</strong>()</td>
<td>返回RDD中的第一个元素，不排序。</td>
</tr>
<tr>
<td><strong>take</strong>(<em>n</em>)</td>
<td>将RDD中的前<em>n</em>个元素作为一个array数组返回。</td>
</tr>
<tr>
<td><strong>takeSample</strong>(<em>withReplacement</em>, <em>num</em>, [<em>seed</em>])</td>
<td>对一个RDD进行随机抽样</td>
</tr>
<tr>
<td><strong>takeOrdered</strong>(<em>n</em>, <em>[ordering]</em>)</td>
<td>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前<em>n</em>个元素。只适用于小结果集，因为所有数据都会被加载到驱动程序的内存中进行排序。</td>
</tr>
<tr>
<td><strong>saveAsTextFile</strong>(<em>path</em>)</td>
<td>将RDD中的元素以文本文件的形式写入本地文件系统、HDFS或其它 Hadoop支持的文件系统中。Spark将对每个元素调用toString方法，将元素转换为文本文件中的一行记录。</td>
</tr>
<tr>
<td><strong>saveAsSequenceFile</strong>(<em>path</em>)</td>
<td>将RDD中的元素以Hadoop SequenceFile的形式写入到本地文件系统、HDFS或其它Hadoop支持的文件系统中。该操作要求RDD中的元素需要实现Hadoop的Writable接口。对于Scala语言而言，它可以将Spark中的基本数据类型自动隐式转换为对应Writable类型。(目前仅支持Java and Scala)</td>
</tr>
<tr>
<td><strong>saveAsObjectFile</strong>(<em>path</em>)</td>
<td>使用Java序列化后存储，可以使用<code>SparkContext.objectFile()</code>进行加载。(目前仅支持Java and Scala)</td>
</tr>
<tr>
<td><strong>countByKey</strong>()</td>
<td>计算每个键出现的次数。</td>
</tr>
<tr>
<td><strong>foreach</strong>(<em>func</em>)</td>
<td>遍历RDD中每个元素，并对其执行<em>fun</em>函数</td>
</tr>
<tr>
<td><strong>foreachPartition</strong>(<em>func</em>)</td>
<td>与foreach类似，但函数单独在RDD的每个分区上运行，运用<em>func</em>函数，并生成新的RDD。</td>
</tr>
</tbody></table>
<p>下面给出部分算子的基本使用示例：</p>
<h3 id="2-1-take"><a href="#2-1-take" class="headerlink" title="2.1 take"></a>2.1 take</h3><p>将RDD中的前<em>n</em>个元素作为一个array数组返回：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).take(<span class="number">3</span>)</span><br><span class="line">res21: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-first"><a href="#2-3-first" class="headerlink" title="2.3 first"></a>2.3 first</h3><p>返回RDD中的第一个元素，不排序：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).first</span><br><span class="line">res22: <span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-reduce"><a href="#2-4-reduce" class="headerlink" title="2.4 reduce"></a>2.4 reduce</h3><p>使用函数<em>func</em>执行归约操作：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">scala&gt; sc.parallelize(list).reduce(_+_)</span><br><span class="line">res18: <span class="type">Int</span> = <span class="number">55</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-takeOrdered"><a href="#2-5-takeOrdered" class="headerlink" title="2.5 takeOrdered"></a>2.5 takeOrdered</h3><p>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前 <em>n</em> 个元素。需要注意的是 <code>takeOrdered</code> 使用隐式参数进行隐式转换，以下为其源码。所以在使用自定义排序时，需要继承 <code>Ordering[T]</code> 实现自定义比较器，然后将其作为隐式参数引入。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeOrdered</span></span>(num: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>]): <span class="type">Array</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义规则排序：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承 Ordering[T],实现自定义比较器，按照 value 值的长度进行排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[(<span class="type">Int</span>, <span class="type">String</span>)] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: (<span class="type">Int</span>, <span class="type">String</span>), y: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">Int</span></span><br><span class="line">    = <span class="keyword">if</span> (x._2.length &gt; y._2.length) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体使用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">CustomOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[(<span class="type">Int</span>, <span class="type">String</span>)] </span>&#123;</span><br><span class="line">     |     <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: (<span class="type">Int</span>, <span class="type">String</span>), y: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">Int</span></span><br><span class="line">     |     = <span class="keyword">if</span> (x._2.length &gt; y._2.length) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">     | &#125;</span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">CustomOrdering</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">list=List</span>(<span class="params">(1,&quot;hadoop&quot;</span>),(<span class="params">1,&quot;xiaokangxxs&quot;</span>),(<span class="params">1,&quot;azkaban&quot;</span>),(<span class="params">1,&quot;hive&quot;</span>),(<span class="params">1,&quot;spark&quot;</span>))</span></span><br><span class="line"><span class="class"><span class="title">list</span></span>: <span class="type">List</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">List</span>((<span class="number">1</span>,hadoop), (<span class="number">1</span>,xiaokangxxs), (<span class="number">1</span>,azkaban), (<span class="number">1</span>,hive), (<span class="number">1</span>,spark))</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">implicit</span> <span class="keyword">val</span> implicitOrdering=<span class="keyword">new</span> <span class="type">CustomOrdering</span></span><br><span class="line">implicitOrdering: <span class="type">CustomOrdering</span> = <span class="type">CustomOrdering</span>@<span class="number">3102</span>c986</span><br><span class="line"></span><br><span class="line">scala&gt; sc.parallelize(list).takeOrdered(<span class="number">5</span>)</span><br><span class="line">res20: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">Array</span>((<span class="number">1</span>,hive), (<span class="number">1</span>,spark), (<span class="number">1</span>,hadoop), (<span class="number">1</span>,azkaban), (<span class="number">1</span>,xiaokangxxs))</span><br></pre></td></tr></table></figure>

<h3 id="2-6-countByKey"><a href="#2-6-countByKey" class="headerlink" title="2.6 countByKey"></a>2.6 countByKey</h3><p>计算每个键出现的次数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>,<span class="number">10</span>),(<span class="string">&quot;hadoop&quot;</span>,<span class="number">10</span>),(<span class="string">&quot;xiaokangxxs&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;xiaokang&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;azkaban&quot;</span>,<span class="number">1</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).countByKey()</span><br><span class="line">res23: scala.collection.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Long</span>] = <span class="type">Map</span>(xiaokangxxs -&gt; <span class="number">1</span>, hadoop -&gt; <span class="number">2</span>, xiaokang -&gt; <span class="number">1</span>, azkaban -&gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-7-saveAsTextFile"><a href="#2-7-saveAsTextFile" class="headerlink" title="2.7 saveAsTextFile"></a>2.7 saveAsTextFile</h3><p>将RDD中的元素以文本文件的形式写入本地文件系统、HDFS或其它Hadoop支持的文件系统中。Spark将对每个元素调用toString方法，将元素转换为文本文件中的一行记录。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> list=<span class="type">List</span>((<span class="string">&quot;hadoop&quot;</span>,<span class="number">10</span>),(<span class="string">&quot;hadoop&quot;</span>,<span class="number">10</span>),(<span class="string">&quot;xiaokangxxs&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;spark&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;azkaban&quot;</span>, <span class="number">1</span>))</span><br><span class="line">scala&gt; sc.parallelize(list).saveAsTextFile(<span class="string">&quot;file:///home/xiaokang/file_out&quot;</span>)</span><br><span class="line"></span><br><span class="line">[xiaokang<span class="meta">@xk</span>1181259634 ~/file_out <span class="number">18</span>:<span class="number">03</span>:<span class="number">23</span>]$cat /home/xiaokang/file_out/part<span class="number">-00000</span></span><br><span class="line">(hadoop,<span class="number">10</span>)</span><br><span class="line">(hadoop,<span class="number">10</span>)</span><br><span class="line">(xiaokangxxs,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">3</span>)</span><br><span class="line">(azkaban,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>WebScraper爬虫</title>
    <url>/2021/04/24/WebScraper%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>chrome浏览器、Web Scraper-0.2.0.18</p>
<h2 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h2><p>打开chrome浏览器，地址栏内输入：<code>chrome://extensions/</code>，点击<code>加载已解压的扩展程序</code>，选择webscraper</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/add-1.png"/> </div>
加载完成后，在页面鼠标右击选择`检查(或F12)`，可以看到`Web Scraper`选项

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/add-2.png"/> </div>
插件以及视频中sitemap下载地址：[https://wwa.lanzous.com/b02b87nda](https://wwa.lanzous.com/b02b87nda)，密码:5rjv 

<h2 id="二、数据爬取"><a href="#二、数据爬取" class="headerlink" title="二、数据爬取"></a>二、数据爬取</h2><h3 id="2-1-选取目标网址"><a href="#2-1-选取目标网址" class="headerlink" title="2.1 选取目标网址"></a>2.1 选取目标网址</h3><p>这里我以<code>bilibili</code>为例进行演示，我将会爬取python关键字相关的信息。网址：<a href="https://search.bilibili.com/all?keyword=python&from_source=nav_suggest_new">https://search.bilibili.com/all?keyword=python&amp;from_source=nav_suggest_new</a></p>
<p>进入开发者模式的<code>Web Scraper</code>选项栏中，准备开始爬取数据。</p>
<h3 id="2-2-新建一个Sitemap"><a href="#2-2-新建一个Sitemap" class="headerlink" title="2.2  新建一个Sitemap"></a>2.2  新建一个Sitemap</h3><p>点击Create new sitemap，里面有两个选项：Import sitemap是指导入一个已有的sitemap，Create sitemap表示我们要新建一个sitemap。 这里大家可以用我已经测试好的来看下效果，也可以自己动手创建一个新的（爬其它数据），我给大家从新建开始演示。</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-1.png"/> </div>
Sitemap name：给你要爬取的网页取个名字，需要使用英文字母，并且至少3个字符。比如我抓的是B站有关python的数据，那我就用bi-python-spider来命名。
Start URL：把需要爬取的网页链接复制到这里。

<p>最后点击下方的Create Sitemap完成新建</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-2.png"/> </div>
### 2.3  设置这个Sitemap

<p>点击 Add new selector 创建一级Selector</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-3.png"/> </div>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-4.png"/> </div>
设置好这个一级的Selector之后，点进去设置二级的Selector

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-5.png"/> </div>
重复上面二级Selector的操作，直到选完你想爬的字段

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-6.png"/> </div>
### 2.4  爬取数据

<p>点击Scrape，设置好请求时间间隔和页面加载延迟（默认即可），然后点Start scraping，弹出一个小窗后爬虫就会开始工作。你会得到一个列表，上面有你想要的所有数据。 </p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-7.png"/> </div>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-8.png"/> </div>
由于我们只是爬取了第一页的数据，所以很快我们就可以看到结果

<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-9.png"/> </div>
### 2.5 数据导出

<p>这里我们可以将爬取的数据以CSV格式导出，同样也可以将Sitemap导出供他人使用。</p>
<div align="center"> <img width="600px" src="https://raw.githubusercontent.com/xiaokangxxs/notebook/master/docs/spider/scraper-10.png"/> </div>
## 三、其它

<p>有些时候我们需要爬取的数据往往会有分页，比如我们上面有关python的检索结果<a href="https://search.bilibili.com/all?keyword=python&from_source=nav_suggest_new&page=2">https://search.bilibili.com/all?keyword=python&amp;from_source=nav_suggest_new&amp;page=2</a>，这里第二页是通过路径一个page参数来进行传递。在Web Scraper 中提供了一种写法，可以设置页码范围及递增步长。格式： [开始值-结束值:步长]，举几个例子来说明一下：</p>
<p>1、获取2-6页，步长为1的页面 ：[2-6] 或者 [2-6:1]</p>
<p>2、获取2-6页，步长为2的页面：[2-6:2]</p>
<p>这里小编只是简单介绍总结了Web Scraper的插件的安装以及一个简单的单页面例子。其实Web Scraper的功能远远不止于此，它还能抓取分页、多页多元素的页面，还能抓取二级页面。需要大家自己慢慢摸索~~~ </p>
]]></content>
  </entry>
  <entry>
    <title>实用网站</title>
    <url>/2021/04/24/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="搞学习"><a href="#搞学习" class="headerlink" title="搞学习"></a>搞学习</h3><ul>
<li>知乎：<a href="http://www.zhihu.com/">www.zhihu.com</a></li>
<li>TED（最优质的演讲）：<a href="https://www.ted.com/">https://www.ted.com/</a></li>
<li>大学资源网：<a href="http://www.dxzy163.com/">http://www.dxzy163.com/</a></li>
<li>简答题：<a href="http://www.jiandati.com/">http://www.jiandati.com/</a></li>
<li>网易公开课：<a href="https://open.163.com/ted/">https://open.163.com/ted/</a></li>
<li>网易云课堂：<a href="https://study.163.com/">https://study.163.com/</a></li>
<li>中国大学MOOC：<a href="http://www.icourse163.org/">www.icourse163.org</a></li>
<li>网易云课堂：study.163.com</li>
<li>哔哩哔哩弹幕网：<a href="http://www.bilibili.com/">www.bilibili.com</a></li>
<li>我要自学网：<a href="http://www.51zxw.net/">www.51zxw.net</a></li>
<li>学堂在线：<a href="http://www.xuetangx.com/">www.xuetangx.com</a></li>
<li>爱课程：<a href="http://www.icourses.cn/">www.icourses.cn</a></li>
<li>猫咪论文：<a href="https://lunwen.im/">https://lunwen.im/</a></li>
<li>iData（论文搜索）：<a href="http://www.cn-ki.net/">www.cn-ki.net</a></li>
<li>文泉考试：<a href="https://www.wqkaoshi.com/">https://www.wqkaoshi.com</a></li>
<li>码农之家（计算机电子书下载）：<a href="http://www.xz577.com/">www.xz577.com</a></li>
<li>鸠摩搜书：<a href="http://www.jiumodiary.com/">www.jiumodiary.com</a></li>
<li>云海电子图书馆：<a href="http://www.pdfbook.cn/">www.pdfbook.cn</a></li>
<li>周读（书籍搜索）：ireadweek.com</li>
<li>知轩藏书：<a href="http://www.zxcs.me/">http://www.zxcs.me/</a></li>
<li>脚本之家电子书下载：<a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a></li>
<li>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html">http://www.soshuvip.com/all.html</a></li>
<li>书格（在线古籍图书馆）：<a href="https://new.shuge.org/">https://new.shuge.org/</a></li>
<li>术语在线：<a href="http://www.termonline.cn/">http://www.termonline.cn/</a></li>
<li>必看网（人生必看的书籍）：<a href="https://www.biikan.com/">https://www.biikan.com/</a></li>
</ul>
<h3 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h3><ul>
<li>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/">http://fakeupdate.net/</a></li>
<li>创意光线绘画：<a href="http://weavesilk.com/">http://weavesilk.com/</a></li>
<li>星系观察：<a href="https://stellarium-web.org/">https://stellarium-web.org/</a></li>
<li>煎蛋：<a href="http://jandan.net/">http://jandan.net/</a></li>
<li>渣男-说话的艺术：<a href="https://lovelive.tools/">https://lovelive.tools/</a></li>
<li>全历史：<a href="https://www.allhistory.com/">https://www.allhistory.com/</a></li>
<li>iData：<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></li>
<li>caj云阅读：<a href="http://cajviewer.cnki.net/cajcloud/">http://cajviewer.cnki.net/cajcloud/</a></li>
</ul>
<h3 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h3><ul>
<li>DogeDoge搜索引擎：<a href="http://www.dogedoge.com/">www.dogedoge.com</a></li>
<li>秘迹搜索：<a href="https://mijisou.com/">https://mijisou.com/</a></li>
<li>小白盘：<a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com/</a></li>
<li>云盘精灵（资源搜索）：<a href="http://www.yunpanjingling.com/">www.yunpanjingling.com</a></li>
<li>虫部落（资源搜索）：<a href="http://www.chongbuluo.com/">www.chongbuluo.com</a></li>
<li>如风搜（资源搜索）：<a href="http://www.rufengso.net/">http://www.rufengso.net/</a></li>
<li>爱扒：<a href="https://www.zyboe.com/">https://www.zyboe.com/</a></li>
</ul>
<h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><ul>
<li>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/">https://uzer.me/</a></li>
<li>在线接口测试（Getman）：<a href="https://getman.cn/">https://getman.cn/</a></li>
<li>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/">https://www.xiangdang.net/</a></li>
<li>二维码生成：<a href="https://cli.im/">https://cli.im/</a></li>
<li>搜狗翻译：fanyi.sogou.com</li>
<li>熵数（图表制作，数据可视化）：<a href="https://dydata.io/appv2/#/pages/index/home">https://dydata.io/appv2/#/pages/index/home</a></li>
<li>拷贝兔：<a href="https://cp.anyknew.com/">https://cp.anyknew.com/</a></li>
<li>图片无限变放大：<a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></li>
<li>幕布（在线大纲笔记工具）：mubu.com</li>
<li>奶牛快传（在线传输文件利器）：cowtransfer.com</li>
<li>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/">https://zh.justcnw.com/</a></li>
<li>调查问卷制作：<a href="https://www.wenjuan.com/">https://www.wenjuan.com/</a></li>
<li>果核剥壳（软件下载）：<a href="https://www.ghpym.com/">https://www.ghpym.com/</a></li>
<li>软件下载：<a href="https://www.unyoo.com/">https://www.unyoo.com/</a></li>
<li>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li>
</ul>
<h3 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h3><ul>
<li>NiceTool.net 好工具网：<a href="http://www.nicetool.net/">http://www.nicetool.net/</a></li>
<li>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/">http://tool.uixsj.cn/</a></li>
<li>蓝调网站：<a href="http://lcoc.top/">http://lcoc.top/</a></li>
<li>偷渡鱼：<a href="https://touduyu.com/">https://touduyu.com/</a></li>
<li>牛导航：<a href="http://www.ziliao6.com/">http://www.ziliao6.com/</a></li>
<li>小呆导航：<a href="https://www.webjike.com/index.html">https://www.webjike.com/index.html</a></li>
<li>简法主页：<a href="http://www.jianfast.com/">http://www.jianfast.com/</a></li>
<li>KIM主页：<a href="https://kim.plopco.com/">https://kim.plopco.com/</a></li>
<li>聚BT：<a href="https://jubt.net/cn/index.html">https://jubt.net/cn/index.html</a></li>
<li>精准云工具合集：<a href="https://jingzhunyun.com/">https://jingzhunyun.com/</a></li>
<li>兔2工具合集：<a href="https://www.tool2.cn/">https://www.tool2.cn/</a></li>
<li>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com/">www.toolnb.com</a></li>
<li>工具导航：<a href="https://hao.logosc.cn/">https://hao.logosc.cn/</a></li>
</ul>
<h3 id="看视频"><a href="#看视频" class="headerlink" title="看视频"></a>看视频</h3><ul>
<li>电影推荐（分类别致）：<a href="http://www.mvcat.com/">http://www.mvcat.com</a></li>
<li>去看TV：<a href="https://www.qukantv.net/">https://www.qukantv.net/</a></li>
<li>动漫视频网：<a href="http://www.zzzfun.com/">http://www.zzzfun.com/</a></li>
<li>94神马电影网：<a href="http://www.9rmb.com/">http://www.9rmb.com/</a></li>
<li>NO视频官网：<a href="http://www.novipnoad.com/">http://www.novipnoad.com/</a></li>
<li>蓝光画质电影：<a href="http://www.languang.co/">http://www.languang.co/</a></li>
<li>在线看剧：<a href="http://dy.27234.cn/">http://dy.27234.cn/</a></li>
<li>大数据导航：<a href="http://hao.199it.com/">http://hao.199it.com/</a></li>
<li>多功能图片网站：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li>
<li>牛牛TV：<a href="http://www.ziliao6.com/tv/">http://www.ziliao6.com/tv/</a></li>
<li>VideoFk解析视频：<a href="http://www.videofk.com/">http://www.videofk.com/</a></li>
<li>蓝调网站：<a href="http://lcoc.top/vip2.3/">http://lcoc.top/vip2.3/</a></li>
</ul>
<h3 id="学设计"><a href="#学设计" class="headerlink" title="学设计"></a>学设计</h3><ul>
<li>免费音频素材：<a href="https://icons8.cn/music">https://icons8.cn/music</a></li>
<li>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/">https://www.newcger.com/</a></li>
<li>小图标下载：<a href="https://www.easyicon.net/">https://www.easyicon.net/</a></li>
<li>第一字体转换器：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></li>
<li>doyoudosh（平面设计）：<a href="http://www.doyoudo.com/">www.doyoudo.com</a></li>
<li>企业宣传视频在线制作：<a href="https://duomu.tv/">https://duomu.tv/</a></li>
<li>MAKE海报设计官网：<a href="http://maka.im/">http://maka.im/</a></li>
<li>一键海报神器：<a href="https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral">https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral</a></li>
<li>字由（字体设计）：<a href="http://www.hellofont.cn/">http://www.hellofont.cn/</a></li>
<li>查字体网站：<a href="https://fonts.safe.360.cn/">https://fonts.safe.360.cn/</a></li>
<li>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/">http://www.aigei.com/</a></li>
<li>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor">https://bilibili.clipchamp.com/editor</a></li>
</ul>
<h3 id="搞文档"><a href="#搞文档" class="headerlink" title="搞文档"></a>搞文档</h3><ul>
<li>即书（在线制作PPT）：<a href="https://www.keysuper.com/">https://www.keysuper.com/</a></li>
<li>PDF处理：<a href="https://smallpdf.com/cn">https://smallpdf.com/cn</a></li>
<li>PDF处理：<a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></li>
<li>PDF处理：<a href="https://www.pdfpai.com/">https://www.pdfpai.com/</a></li>
<li>PDF处理：<a href="https://www.hipdf.cn/">https://www.hipdf.cn/</a></li>
<li>腾讯文档（在线协作编辑和管理文档）：docs.qq.com</li>
<li>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com/">www.processon.com</a></li>
<li>iLovePDF（在线转换PDF利器）：<a href="http://www.ilovepdf.com/">www.ilovepdf.com</a></li>
<li>PPT在线制作：<a href="https://www.woodo.cn/">https://www.woodo.cn/</a></li>
<li>PDF24工具（pdf处理工具）：<a href="https://tools.pdf24.org/en">https://tools.pdf24.org/en</a></li>
<li>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai/">www.imgbot.ai</a></li>
<li>福昕云编辑（在线编辑PDF）：edit.foxitcloud.cn</li>
<li>TinyPNG（在线压缩图片）：tinypng.com</li>
<li>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套<br>）：uzer.me</li>
<li>优品PPT（模板下载）：<a href="http://www.ypppt.com/">http://www.ypppt.com/</a></li>
<li>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/">http://www.1ppt.com/xiazai/</a></li>
<li>三顿PPT导航：sandunppt.com</li>
</ul>
<h3 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h3><ul>
<li>电脑壁纸：<a href="http://lcoc.top/bizhi/">http://lcoc.top/bizhi/</a></li>
<li><a href="https://unsplash.com/">https://unsplash.com/</a></li>
<li><a href="https://pixabay.com/">https://pixabay.com/</a></li>
<li><a href="https://www.pexels.com/">https://www.pexels.com/</a></li>
<li><a href="https://visualhunt.com/">https://visualhunt.com/</a></li>
<li><a href="https://www.ssyer.com/">https://www.ssyer.com/</a></li>
<li>彼岸图网：<a href="http://pic.netbian.com/">http://pic.netbian.com/</a></li>
<li>极像素（超高清大图）：<a href="https://www.sigoo.com/">https://www.sigoo.com/</a></li>
<li>免费版权图片搜索：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li>
</ul>
]]></content>
  </entry>
</search>
